
Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000307c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003188  08003188  00004188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031ac  080031ac  0000506c  2**0
                  CONTENTS
  4 .ARM          00000000  080031ac  080031ac  0000506c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031ac  080031ac  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031ac  080031ac  000041ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031b0  080031b0  000041b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080031b4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  2000006c  08003220  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08003220  0000542c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008953  00000000  00000000  00005095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e96  00000000  00000000  0000d9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0000f880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000826  00000000  00000000  00010338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017270  00000000  00000000  00010b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4fe  00000000  00000000  00027dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082457  00000000  00000000  000352cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7723  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029dc  00000000  00000000  000b7768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000ba144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003170 	.word	0x08003170

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08003170 	.word	0x08003170

0800014c <fsm_automatic>:
 */

#include "fsm_automatic.h"


void fsm_automatic(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(mode == MODE1){
 8000150:	4b3a      	ldr	r3, [pc, #232]	@ (800023c <fsm_automatic+0xf0>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d16e      	bne.n	8000236 <fsm_automatic+0xea>
		switch (status){
 8000158:	4b39      	ldr	r3, [pc, #228]	@ (8000240 <fsm_automatic+0xf4>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	2b04      	cmp	r3, #4
 800015e:	d861      	bhi.n	8000224 <fsm_automatic+0xd8>
 8000160:	a201      	add	r2, pc, #4	@ (adr r2, 8000168 <fsm_automatic+0x1c>)
 8000162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000166:	bf00      	nop
 8000168:	0800017d 	.word	0x0800017d
 800016c:	08000185 	.word	0x08000185
 8000170:	080001ad 	.word	0x080001ad
 8000174:	080001d5 	.word	0x080001d5
 8000178:	080001fd 	.word	0x080001fd
			case NO_LED:
				status = RED_GREEN;
 800017c:	4b30      	ldr	r3, [pc, #192]	@ (8000240 <fsm_automatic+0xf4>)
 800017e:	2201      	movs	r2, #1
 8000180:	601a      	str	r2, [r3, #0]
				break;
 8000182:	e058      	b.n	8000236 <fsm_automatic+0xea>
			case RED_GREEN:
		//		display7SEG_TFL();
				displayTFL();
 8000184:	f001 fbf8 	bl	8001978 <displayTFL>
				counter++;
 8000188:	4b2e      	ldr	r3, [pc, #184]	@ (8000244 <fsm_automatic+0xf8>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	3301      	adds	r3, #1
 800018e:	4a2d      	ldr	r2, [pc, #180]	@ (8000244 <fsm_automatic+0xf8>)
 8000190:	6013      	str	r3, [r2, #0]
				if(counter >= GREEN_TIME){
 8000192:	4b2c      	ldr	r3, [pc, #176]	@ (8000244 <fsm_automatic+0xf8>)
 8000194:	681a      	ldr	r2, [r3, #0]
 8000196:	4b2c      	ldr	r3, [pc, #176]	@ (8000248 <fsm_automatic+0xfc>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	429a      	cmp	r2, r3
 800019c:	db44      	blt.n	8000228 <fsm_automatic+0xdc>
					status = RED_YELLOW;
 800019e:	4b28      	ldr	r3, [pc, #160]	@ (8000240 <fsm_automatic+0xf4>)
 80001a0:	2202      	movs	r2, #2
 80001a2:	601a      	str	r2, [r3, #0]
					counter =0;
 80001a4:	4b27      	ldr	r3, [pc, #156]	@ (8000244 <fsm_automatic+0xf8>)
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
				}
				break;
 80001aa:	e03d      	b.n	8000228 <fsm_automatic+0xdc>
			case RED_YELLOW:
		//		display7SEG_TFL();
				displayTFL();
 80001ac:	f001 fbe4 	bl	8001978 <displayTFL>
				counter++;
 80001b0:	4b24      	ldr	r3, [pc, #144]	@ (8000244 <fsm_automatic+0xf8>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	3301      	adds	r3, #1
 80001b6:	4a23      	ldr	r2, [pc, #140]	@ (8000244 <fsm_automatic+0xf8>)
 80001b8:	6013      	str	r3, [r2, #0]
				if(counter >= YELLOW_TIME){
 80001ba:	4b22      	ldr	r3, [pc, #136]	@ (8000244 <fsm_automatic+0xf8>)
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	4b23      	ldr	r3, [pc, #140]	@ (800024c <fsm_automatic+0x100>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	db32      	blt.n	800022c <fsm_automatic+0xe0>
					status = GREEN_RED;
 80001c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000240 <fsm_automatic+0xf4>)
 80001c8:	2203      	movs	r2, #3
 80001ca:	601a      	str	r2, [r3, #0]
					counter =0;
 80001cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000244 <fsm_automatic+0xf8>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
				}
				break;
 80001d2:	e02b      	b.n	800022c <fsm_automatic+0xe0>
			case GREEN_RED:
		//		display7SEG_TFL();
				displayTFL();
 80001d4:	f001 fbd0 	bl	8001978 <displayTFL>
				counter++;
 80001d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000244 <fsm_automatic+0xf8>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	3301      	adds	r3, #1
 80001de:	4a19      	ldr	r2, [pc, #100]	@ (8000244 <fsm_automatic+0xf8>)
 80001e0:	6013      	str	r3, [r2, #0]
				if(counter >= GREEN_TIME){
 80001e2:	4b18      	ldr	r3, [pc, #96]	@ (8000244 <fsm_automatic+0xf8>)
 80001e4:	681a      	ldr	r2, [r3, #0]
 80001e6:	4b18      	ldr	r3, [pc, #96]	@ (8000248 <fsm_automatic+0xfc>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	429a      	cmp	r2, r3
 80001ec:	db20      	blt.n	8000230 <fsm_automatic+0xe4>
					status = YELLOW_RED;
 80001ee:	4b14      	ldr	r3, [pc, #80]	@ (8000240 <fsm_automatic+0xf4>)
 80001f0:	2204      	movs	r2, #4
 80001f2:	601a      	str	r2, [r3, #0]
					counter =0;
 80001f4:	4b13      	ldr	r3, [pc, #76]	@ (8000244 <fsm_automatic+0xf8>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
				}
				break;
 80001fa:	e019      	b.n	8000230 <fsm_automatic+0xe4>
			case YELLOW_RED:
		//		display7SEG_TFL();
				displayTFL();
 80001fc:	f001 fbbc 	bl	8001978 <displayTFL>
				counter++;
 8000200:	4b10      	ldr	r3, [pc, #64]	@ (8000244 <fsm_automatic+0xf8>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	3301      	adds	r3, #1
 8000206:	4a0f      	ldr	r2, [pc, #60]	@ (8000244 <fsm_automatic+0xf8>)
 8000208:	6013      	str	r3, [r2, #0]
				if(counter >= YELLOW_TIME){
 800020a:	4b0e      	ldr	r3, [pc, #56]	@ (8000244 <fsm_automatic+0xf8>)
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	4b0f      	ldr	r3, [pc, #60]	@ (800024c <fsm_automatic+0x100>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	429a      	cmp	r2, r3
 8000214:	db0e      	blt.n	8000234 <fsm_automatic+0xe8>
					status = RED_GREEN;
 8000216:	4b0a      	ldr	r3, [pc, #40]	@ (8000240 <fsm_automatic+0xf4>)
 8000218:	2201      	movs	r2, #1
 800021a:	601a      	str	r2, [r3, #0]
					counter =0;
 800021c:	4b09      	ldr	r3, [pc, #36]	@ (8000244 <fsm_automatic+0xf8>)
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
				}
				break;
 8000222:	e007      	b.n	8000234 <fsm_automatic+0xe8>
			default:
				break;
 8000224:	bf00      	nop
 8000226:	e006      	b.n	8000236 <fsm_automatic+0xea>
				break;
 8000228:	bf00      	nop
 800022a:	e004      	b.n	8000236 <fsm_automatic+0xea>
				break;
 800022c:	bf00      	nop
 800022e:	e002      	b.n	8000236 <fsm_automatic+0xea>
				break;
 8000230:	bf00      	nop
 8000232:	e000      	b.n	8000236 <fsm_automatic+0xea>
				break;
 8000234:	bf00      	nop

			}
	}

}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000054 	.word	0x20000054
 8000240:	20000098 	.word	0x20000098
 8000244:	20000094 	.word	0x20000094
 8000248:	2000004c 	.word	0x2000004c
 800024c:	20000050 	.word	0x20000050

08000250 <isButtonPressed>:
int TimeOutForKeyPress[BUTTON_COUNT] = {500, 500, 500};
int button_pressed[BUTTON_COUNT] = {0, 0, 0};
int button_long_pressed[BUTTON_COUNT] = {0, 0, 0};
int button_flag[BUTTON_COUNT] = {0, 0, 0};

int isButtonPressed(int buttonIndex){
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	if (button_flag[buttonIndex] == 1) {
 8000258:	4a09      	ldr	r2, [pc, #36]	@ (8000280 <isButtonPressed+0x30>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000260:	2b01      	cmp	r3, #1
 8000262:	d106      	bne.n	8000272 <isButtonPressed+0x22>
		button_flag[buttonIndex] = 0;
 8000264:	4a06      	ldr	r2, [pc, #24]	@ (8000280 <isButtonPressed+0x30>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2100      	movs	r1, #0
 800026a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800026e:	2301      	movs	r3, #1
 8000270:	e000      	b.n	8000274 <isButtonPressed+0x24>
	}
	return 0;
 8000272:	2300      	movs	r3, #0
}
 8000274:	4618      	mov	r0, r3
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	20000088 	.word	0x20000088

08000284 <subKeyProcess>:
		return 1;
	}
	return 0;
}

void subKeyProcess(int buttonIndex){
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]

	button_flag[buttonIndex] = 1;
 800028c:	4a04      	ldr	r2, [pc, #16]	@ (80002a0 <subKeyProcess+0x1c>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2101      	movs	r1, #1
 8000292:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	20000088 	.word	0x20000088

080002a4 <getKeyInput>:

void getKeyInput(){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	for (int i = 0; i < BUTTON_COUNT; i++) {
 80002aa:	2300      	movs	r3, #0
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	e073      	b.n	8000398 <getKeyInput+0xf4>
		KeyReg2[i] = KeyReg1[i];
 80002b0:	4a3d      	ldr	r2, [pc, #244]	@ (80003a8 <getKeyInput+0x104>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b8:	493c      	ldr	r1, [pc, #240]	@ (80003ac <getKeyInput+0x108>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80002c0:	4a3b      	ldr	r2, [pc, #236]	@ (80003b0 <getKeyInput+0x10c>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002c8:	4937      	ldr	r1, [pc, #220]	@ (80003a8 <getKeyInput+0x104>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BUTTON[i]);
 80002d0:	4a38      	ldr	r2, [pc, #224]	@ (80003b4 <getKeyInput+0x110>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d8:	b29b      	uxth	r3, r3
 80002da:	4619      	mov	r1, r3
 80002dc:	4836      	ldr	r0, [pc, #216]	@ (80003b8 <getKeyInput+0x114>)
 80002de:	f001 ff19 	bl	8002114 <HAL_GPIO_ReadPin>
 80002e2:	4603      	mov	r3, r0
 80002e4:	4619      	mov	r1, r3
 80002e6:	4a32      	ldr	r2, [pc, #200]	@ (80003b0 <getKeyInput+0x10c>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80002ee:	4a2e      	ldr	r2, [pc, #184]	@ (80003a8 <getKeyInput+0x104>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002f6:	492e      	ldr	r1, [pc, #184]	@ (80003b0 <getKeyInput+0x10c>)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002fe:	429a      	cmp	r2, r3
 8000300:	d147      	bne.n	8000392 <getKeyInput+0xee>
 8000302:	4a29      	ldr	r2, [pc, #164]	@ (80003a8 <getKeyInput+0x104>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800030a:	4928      	ldr	r1, [pc, #160]	@ (80003ac <getKeyInput+0x108>)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000312:	429a      	cmp	r2, r3
 8000314:	d13d      	bne.n	8000392 <getKeyInput+0xee>
			if (KeyReg2[i] != KeyReg3[i]) {
 8000316:	4a25      	ldr	r2, [pc, #148]	@ (80003ac <getKeyInput+0x108>)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800031e:	4927      	ldr	r1, [pc, #156]	@ (80003bc <getKeyInput+0x118>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000326:	429a      	cmp	r2, r3
 8000328:	d016      	beq.n	8000358 <getKeyInput+0xb4>
				KeyReg3[i] = KeyReg2[i];
 800032a:	4a20      	ldr	r2, [pc, #128]	@ (80003ac <getKeyInput+0x108>)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000332:	4922      	ldr	r1, [pc, #136]	@ (80003bc <getKeyInput+0x118>)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == PRESSED_STATE) {
 800033a:	4a20      	ldr	r2, [pc, #128]	@ (80003bc <getKeyInput+0x118>)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d125      	bne.n	8000392 <getKeyInput+0xee>
					TimeOutForKeyPress[i] = 200;
 8000346:	4a1e      	ldr	r2, [pc, #120]	@ (80003c0 <getKeyInput+0x11c>)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	21c8      	movs	r1, #200	@ 0xc8
 800034c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 8000350:	6878      	ldr	r0, [r7, #4]
 8000352:	f7ff ff97 	bl	8000284 <subKeyProcess>
 8000356:	e01c      	b.n	8000392 <getKeyInput+0xee>
				}

			} else {
				TimeOutForKeyPress[i]--;
 8000358:	4a19      	ldr	r2, [pc, #100]	@ (80003c0 <getKeyInput+0x11c>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000360:	1e5a      	subs	r2, r3, #1
 8000362:	4917      	ldr	r1, [pc, #92]	@ (80003c0 <getKeyInput+0x11c>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0) {
 800036a:	4a15      	ldr	r2, [pc, #84]	@ (80003c0 <getKeyInput+0x11c>)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d10d      	bne.n	8000392 <getKeyInput+0xee>
					TimeOutForKeyPress[i] = 200;
 8000376:	4a12      	ldr	r2, [pc, #72]	@ (80003c0 <getKeyInput+0x11c>)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	21c8      	movs	r1, #200	@ 0xc8
 800037c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (KeyReg3[i] == PRESSED_STATE) {
 8000380:	4a0e      	ldr	r2, [pc, #56]	@ (80003bc <getKeyInput+0x118>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d102      	bne.n	8000392 <getKeyInput+0xee>
						subKeyProcess(i);
 800038c:	6878      	ldr	r0, [r7, #4]
 800038e:	f7ff ff79 	bl	8000284 <subKeyProcess>
	for (int i = 0; i < BUTTON_COUNT; i++) {
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	3301      	adds	r3, #1
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2b02      	cmp	r3, #2
 800039c:	dd88      	ble.n	80002b0 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 800039e:	bf00      	nop
 80003a0:	bf00      	nop
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000018 	.word	0x20000018
 80003ac:	20000024 	.word	0x20000024
 80003b0:	2000000c 	.word	0x2000000c
 80003b4:	20000000 	.word	0x20000000
 80003b8:	40010800 	.word	0x40010800
 80003bc:	20000030 	.word	0x20000030
 80003c0:	2000003c 	.word	0x2000003c

080003c4 <display_modetemp>:
 *      Author: dangq
 */

#include "fsm_manual.h"

void display_modetemp(int temp){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	switch(num){
 80003cc:	4b20      	ldr	r3, [pc, #128]	@ (8000450 <display_modetemp+0x8c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d002      	beq.n	80003da <display_modetemp+0x16>
 80003d4:	2b02      	cmp	r3, #2
 80003d6:	d020      	beq.n	800041a <display_modetemp+0x56>
	case 2:
		display7SEG1(mode/10);
		display7SEG2(temp/10);
		break;
	default:
		break;
 80003d8:	e035      	b.n	8000446 <display_modetemp+0x82>
		display7SEG1(mode%10);
 80003da:	4b1e      	ldr	r3, [pc, #120]	@ (8000454 <display_modetemp+0x90>)
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	4b1e      	ldr	r3, [pc, #120]	@ (8000458 <display_modetemp+0x94>)
 80003e0:	fb83 1302 	smull	r1, r3, r3, r2
 80003e4:	1099      	asrs	r1, r3, #2
 80003e6:	17d3      	asrs	r3, r2, #31
 80003e8:	1ac9      	subs	r1, r1, r3
 80003ea:	460b      	mov	r3, r1
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	440b      	add	r3, r1
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	1ad1      	subs	r1, r2, r3
 80003f4:	4608      	mov	r0, r1
 80003f6:	f000 fcab 	bl	8000d50 <display7SEG1>
		display7SEG2(temp%10);
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	4b16      	ldr	r3, [pc, #88]	@ (8000458 <display_modetemp+0x94>)
 80003fe:	fb83 1302 	smull	r1, r3, r3, r2
 8000402:	1099      	asrs	r1, r3, #2
 8000404:	17d3      	asrs	r3, r2, #31
 8000406:	1ac9      	subs	r1, r1, r3
 8000408:	460b      	mov	r3, r1
 800040a:	009b      	lsls	r3, r3, #2
 800040c:	440b      	add	r3, r1
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	1ad1      	subs	r1, r2, r3
 8000412:	4608      	mov	r0, r1
 8000414:	f000 fad2 	bl	80009bc <display7SEG2>
		break;
 8000418:	e015      	b.n	8000446 <display_modetemp+0x82>
		display7SEG1(mode/10);
 800041a:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <display_modetemp+0x90>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a0e      	ldr	r2, [pc, #56]	@ (8000458 <display_modetemp+0x94>)
 8000420:	fb82 1203 	smull	r1, r2, r2, r3
 8000424:	1092      	asrs	r2, r2, #2
 8000426:	17db      	asrs	r3, r3, #31
 8000428:	1ad3      	subs	r3, r2, r3
 800042a:	4618      	mov	r0, r3
 800042c:	f000 fc90 	bl	8000d50 <display7SEG1>
		display7SEG2(temp/10);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a09      	ldr	r2, [pc, #36]	@ (8000458 <display_modetemp+0x94>)
 8000434:	fb82 1203 	smull	r1, r2, r2, r3
 8000438:	1092      	asrs	r2, r2, #2
 800043a:	17db      	asrs	r3, r3, #31
 800043c:	1ad3      	subs	r3, r2, r3
 800043e:	4618      	mov	r0, r3
 8000440:	f000 fabc 	bl	80009bc <display7SEG2>
		break;
 8000444:	bf00      	nop

	}
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	2000005c 	.word	0x2000005c
 8000454:	20000054 	.word	0x20000054
 8000458:	66666667 	.word	0x66666667

0800045c <fsm_manual>:

void fsm_manual(){
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	switch (mode){
 8000460:	4b83      	ldr	r3, [pc, #524]	@ (8000670 <fsm_manual+0x214>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	3b01      	subs	r3, #1
 8000466:	2b03      	cmp	r3, #3
 8000468:	f200 8190 	bhi.w	800078c <fsm_manual+0x330>
 800046c:	a201      	add	r2, pc, #4	@ (adr r2, 8000474 <fsm_manual+0x18>)
 800046e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000472:	bf00      	nop
 8000474:	08000485 	.word	0x08000485
 8000478:	080004a7 	.word	0x080004a7
 800047c:	08000587 	.word	0x08000587
 8000480:	08000699 	.word	0x08000699
	case MODE1:
		if(isButtonPressed(0)==1){
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff fee3 	bl	8000250 <isButtonPressed>
 800048a:	4603      	mov	r3, r0
 800048c:	2b01      	cmp	r3, #1
 800048e:	f040 817f 	bne.w	8000790 <fsm_manual+0x334>
			mode = MODE2;
 8000492:	4b77      	ldr	r3, [pc, #476]	@ (8000670 <fsm_manual+0x214>)
 8000494:	2202      	movs	r2, #2
 8000496:	601a      	str	r2, [r3, #0]
			status = 0;
 8000498:	4b76      	ldr	r3, [pc, #472]	@ (8000674 <fsm_manual+0x218>)
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
			counter =0;
 800049e:	4b76      	ldr	r3, [pc, #472]	@ (8000678 <fsm_manual+0x21c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
		}
		break;
 80004a4:	e174      	b.n	8000790 <fsm_manual+0x334>
	case MODE2:
			display_modetemp(temp_RED);
 80004a6:	4b75      	ldr	r3, [pc, #468]	@ (800067c <fsm_manual+0x220>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff ff8a 	bl	80003c4 <display_modetemp>

			HAL_GPIO_TogglePin(GPIOA,LED_RED1);
 80004b0:	2104      	movs	r1, #4
 80004b2:	4873      	ldr	r0, [pc, #460]	@ (8000680 <fsm_manual+0x224>)
 80004b4:	f001 fe5d 	bl	8002172 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA,LED_RED2);
 80004b8:	2140      	movs	r1, #64	@ 0x40
 80004ba:	4871      	ldr	r0, [pc, #452]	@ (8000680 <fsm_manual+0x224>)
 80004bc:	f001 fe59 	bl	8002172 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN1, RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2108      	movs	r1, #8
 80004c4:	486e      	ldr	r0, [pc, #440]	@ (8000680 <fsm_manual+0x224>)
 80004c6:	f001 fe3c 	bl	8002142 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN2, RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2180      	movs	r1, #128	@ 0x80
 80004ce:	486c      	ldr	r0, [pc, #432]	@ (8000680 <fsm_manual+0x224>)
 80004d0:	f001 fe37 	bl	8002142 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW1, RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2110      	movs	r1, #16
 80004d8:	4869      	ldr	r0, [pc, #420]	@ (8000680 <fsm_manual+0x224>)
 80004da:	f001 fe32 	bl	8002142 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW2, RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004e4:	4866      	ldr	r0, [pc, #408]	@ (8000680 <fsm_manual+0x224>)
 80004e6:	f001 fe2c 	bl	8002142 <HAL_GPIO_WritePin>


		if(isButtonPressed(0)==1){
 80004ea:	2000      	movs	r0, #0
 80004ec:	f7ff feb0 	bl	8000250 <isButtonPressed>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d105      	bne.n	8000502 <fsm_manual+0xa6>
			mode = MODE3;
 80004f6:	4b5e      	ldr	r3, [pc, #376]	@ (8000670 <fsm_manual+0x214>)
 80004f8:	2203      	movs	r2, #3
 80004fa:	601a      	str	r2, [r3, #0]
			temp_RED =0;
 80004fc:	4b5f      	ldr	r3, [pc, #380]	@ (800067c <fsm_manual+0x220>)
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)==1){
 8000502:	2001      	movs	r0, #1
 8000504:	f7ff fea4 	bl	8000250 <isButtonPressed>
 8000508:	4603      	mov	r3, r0
 800050a:	2b01      	cmp	r3, #1
 800050c:	d10b      	bne.n	8000526 <fsm_manual+0xca>
			temp_RED++;
 800050e:	4b5b      	ldr	r3, [pc, #364]	@ (800067c <fsm_manual+0x220>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	3301      	adds	r3, #1
 8000514:	4a59      	ldr	r2, [pc, #356]	@ (800067c <fsm_manual+0x220>)
 8000516:	6013      	str	r3, [r2, #0]
			if(temp_RED >99){
 8000518:	4b58      	ldr	r3, [pc, #352]	@ (800067c <fsm_manual+0x220>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b63      	cmp	r3, #99	@ 0x63
 800051e:	dd02      	ble.n	8000526 <fsm_manual+0xca>
				temp_RED = 0;
 8000520:	4b56      	ldr	r3, [pc, #344]	@ (800067c <fsm_manual+0x220>)
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
			}
		}

		if(isButtonPressed(2)== 1 && temp_RED != 0){
 8000526:	2002      	movs	r0, #2
 8000528:	f7ff fe92 	bl	8000250 <isButtonPressed>
 800052c:	4603      	mov	r3, r0
 800052e:	2b01      	cmp	r3, #1
 8000530:	f040 8130 	bne.w	8000794 <fsm_manual+0x338>
 8000534:	4b51      	ldr	r3, [pc, #324]	@ (800067c <fsm_manual+0x220>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	f000 812b 	beq.w	8000794 <fsm_manual+0x338>
			if(temp_RED <= YELLOW_TIME){
 800053e:	4b4f      	ldr	r3, [pc, #316]	@ (800067c <fsm_manual+0x220>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	4b50      	ldr	r3, [pc, #320]	@ (8000684 <fsm_manual+0x228>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	429a      	cmp	r2, r3
 8000548:	dc03      	bgt.n	8000552 <fsm_manual+0xf6>
				temp_RED =RED_TIME;
 800054a:	4b4f      	ldr	r3, [pc, #316]	@ (8000688 <fsm_manual+0x22c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a4b      	ldr	r2, [pc, #300]	@ (800067c <fsm_manual+0x220>)
 8000550:	6013      	str	r3, [r2, #0]
			}
			RED_TIME = temp_RED;
 8000552:	4b4a      	ldr	r3, [pc, #296]	@ (800067c <fsm_manual+0x220>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a4c      	ldr	r2, [pc, #304]	@ (8000688 <fsm_manual+0x22c>)
 8000558:	6013      	str	r3, [r2, #0]
			GREEN_TIME = RED_TIME - YELLOW_TIME;
 800055a:	4b4b      	ldr	r3, [pc, #300]	@ (8000688 <fsm_manual+0x22c>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	4b49      	ldr	r3, [pc, #292]	@ (8000684 <fsm_manual+0x228>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	1ad3      	subs	r3, r2, r3
 8000564:	4a49      	ldr	r2, [pc, #292]	@ (800068c <fsm_manual+0x230>)
 8000566:	6013      	str	r3, [r2, #0]
			temp_RED =0;
 8000568:	4b44      	ldr	r3, [pc, #272]	@ (800067c <fsm_manual+0x220>)
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
			initLedBuffer();
 800056e:	f000 f929 	bl	80007c4 <initLedBuffer>
			status = 0;
 8000572:	4b40      	ldr	r3, [pc, #256]	@ (8000674 <fsm_manual+0x218>)
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
			num_EN =1;
 8000578:	4b45      	ldr	r3, [pc, #276]	@ (8000690 <fsm_manual+0x234>)
 800057a:	2201      	movs	r2, #1
 800057c:	601a      	str	r2, [r3, #0]
			mode = MODE1;
 800057e:	4b3c      	ldr	r3, [pc, #240]	@ (8000670 <fsm_manual+0x214>)
 8000580:	2201      	movs	r2, #1
 8000582:	601a      	str	r2, [r3, #0]
		}
		break;
 8000584:	e106      	b.n	8000794 <fsm_manual+0x338>

	case MODE3:
		display_modetemp(temp_GREEN);
 8000586:	4b43      	ldr	r3, [pc, #268]	@ (8000694 <fsm_manual+0x238>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ff1a 	bl	80003c4 <display_modetemp>

			HAL_GPIO_TogglePin(GPIOA,LED_GREEN1);
 8000590:	2108      	movs	r1, #8
 8000592:	483b      	ldr	r0, [pc, #236]	@ (8000680 <fsm_manual+0x224>)
 8000594:	f001 fded 	bl	8002172 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA,LED_GREEN2);
 8000598:	2180      	movs	r1, #128	@ 0x80
 800059a:	4839      	ldr	r0, [pc, #228]	@ (8000680 <fsm_manual+0x224>)
 800059c:	f001 fde9 	bl	8002172 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, LED_RED1, RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2104      	movs	r1, #4
 80005a4:	4836      	ldr	r0, [pc, #216]	@ (8000680 <fsm_manual+0x224>)
 80005a6:	f001 fdcc 	bl	8002142 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_RED2, RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2140      	movs	r1, #64	@ 0x40
 80005ae:	4834      	ldr	r0, [pc, #208]	@ (8000680 <fsm_manual+0x224>)
 80005b0:	f001 fdc7 	bl	8002142 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW1, RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2110      	movs	r1, #16
 80005b8:	4831      	ldr	r0, [pc, #196]	@ (8000680 <fsm_manual+0x224>)
 80005ba:	f001 fdc2 	bl	8002142 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW2, RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005c4:	482e      	ldr	r0, [pc, #184]	@ (8000680 <fsm_manual+0x224>)
 80005c6:	f001 fdbc 	bl	8002142 <HAL_GPIO_WritePin>


		if(isButtonPressed(0)==1){
 80005ca:	2000      	movs	r0, #0
 80005cc:	f7ff fe40 	bl	8000250 <isButtonPressed>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d105      	bne.n	80005e2 <fsm_manual+0x186>
			mode = MODE4;
 80005d6:	4b26      	ldr	r3, [pc, #152]	@ (8000670 <fsm_manual+0x214>)
 80005d8:	2204      	movs	r2, #4
 80005da:	601a      	str	r2, [r3, #0]
			temp_GREEN =0;
 80005dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000694 <fsm_manual+0x238>)
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]

		}

		if(isButtonPressed(1)==1){
 80005e2:	2001      	movs	r0, #1
 80005e4:	f7ff fe34 	bl	8000250 <isButtonPressed>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d10b      	bne.n	8000606 <fsm_manual+0x1aa>
			temp_GREEN++;
 80005ee:	4b29      	ldr	r3, [pc, #164]	@ (8000694 <fsm_manual+0x238>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	4a27      	ldr	r2, [pc, #156]	@ (8000694 <fsm_manual+0x238>)
 80005f6:	6013      	str	r3, [r2, #0]
			if(temp_GREEN >98){
 80005f8:	4b26      	ldr	r3, [pc, #152]	@ (8000694 <fsm_manual+0x238>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b62      	cmp	r3, #98	@ 0x62
 80005fe:	dd02      	ble.n	8000606 <fsm_manual+0x1aa>
				temp_GREEN = 0;
 8000600:	4b24      	ldr	r3, [pc, #144]	@ (8000694 <fsm_manual+0x238>)
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
			}
		}

		if(isButtonPressed(2)== 1 && temp_GREEN != 0){
 8000606:	2002      	movs	r0, #2
 8000608:	f7ff fe22 	bl	8000250 <isButtonPressed>
 800060c:	4603      	mov	r3, r0
 800060e:	2b01      	cmp	r3, #1
 8000610:	f040 80c2 	bne.w	8000798 <fsm_manual+0x33c>
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <fsm_manual+0x238>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	f000 80bd 	beq.w	8000798 <fsm_manual+0x33c>
			GREEN_TIME = temp_GREEN;
 800061e:	4b1d      	ldr	r3, [pc, #116]	@ (8000694 <fsm_manual+0x238>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a1a      	ldr	r2, [pc, #104]	@ (800068c <fsm_manual+0x230>)
 8000624:	6013      	str	r3, [r2, #0]
			RED_TIME = YELLOW_TIME + GREEN_TIME;
 8000626:	4b17      	ldr	r3, [pc, #92]	@ (8000684 <fsm_manual+0x228>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	4b18      	ldr	r3, [pc, #96]	@ (800068c <fsm_manual+0x230>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4413      	add	r3, r2
 8000630:	4a15      	ldr	r2, [pc, #84]	@ (8000688 <fsm_manual+0x22c>)
 8000632:	6013      	str	r3, [r2, #0]
			temp_GREEN =0;
 8000634:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <fsm_manual+0x238>)
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
			if(RED_TIME >99){
 800063a:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <fsm_manual+0x22c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b63      	cmp	r3, #99	@ 0x63
 8000640:	dd09      	ble.n	8000656 <fsm_manual+0x1fa>
				RED_TIME = 99;
 8000642:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <fsm_manual+0x22c>)
 8000644:	2263      	movs	r2, #99	@ 0x63
 8000646:	601a      	str	r2, [r3, #0]
				YELLOW_TIME = RED_TIME - GREEN_TIME;
 8000648:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <fsm_manual+0x22c>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <fsm_manual+0x230>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	4a0c      	ldr	r2, [pc, #48]	@ (8000684 <fsm_manual+0x228>)
 8000654:	6013      	str	r3, [r2, #0]
			}
			initLedBuffer();
 8000656:	f000 f8b5 	bl	80007c4 <initLedBuffer>
			status=0;
 800065a:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <fsm_manual+0x218>)
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
			num_EN =1;
 8000660:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <fsm_manual+0x234>)
 8000662:	2201      	movs	r2, #1
 8000664:	601a      	str	r2, [r3, #0]
			mode = MODE1;
 8000666:	4b02      	ldr	r3, [pc, #8]	@ (8000670 <fsm_manual+0x214>)
 8000668:	2201      	movs	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
		}
		break;
 800066c:	e094      	b.n	8000798 <fsm_manual+0x33c>
 800066e:	bf00      	nop
 8000670:	20000054 	.word	0x20000054
 8000674:	20000098 	.word	0x20000098
 8000678:	20000094 	.word	0x20000094
 800067c:	200000b4 	.word	0x200000b4
 8000680:	40010800 	.word	0x40010800
 8000684:	20000050 	.word	0x20000050
 8000688:	20000048 	.word	0x20000048
 800068c:	2000004c 	.word	0x2000004c
 8000690:	20000058 	.word	0x20000058
 8000694:	200000b8 	.word	0x200000b8

	case MODE4:
		display_modetemp(temp_YELLOW);
 8000698:	4b42      	ldr	r3, [pc, #264]	@ (80007a4 <fsm_manual+0x348>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff fe91 	bl	80003c4 <display_modetemp>

			HAL_GPIO_TogglePin(GPIOA,LED_YELLOW1);
 80006a2:	2110      	movs	r1, #16
 80006a4:	4840      	ldr	r0, [pc, #256]	@ (80007a8 <fsm_manual+0x34c>)
 80006a6:	f001 fd64 	bl	8002172 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA,LED_YELLOW2);
 80006aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006ae:	483e      	ldr	r0, [pc, #248]	@ (80007a8 <fsm_manual+0x34c>)
 80006b0:	f001 fd5f 	bl	8002172 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN1, RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2108      	movs	r1, #8
 80006b8:	483b      	ldr	r0, [pc, #236]	@ (80007a8 <fsm_manual+0x34c>)
 80006ba:	f001 fd42 	bl	8002142 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN2, RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2180      	movs	r1, #128	@ 0x80
 80006c2:	4839      	ldr	r0, [pc, #228]	@ (80007a8 <fsm_manual+0x34c>)
 80006c4:	f001 fd3d 	bl	8002142 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_RED1, RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2104      	movs	r1, #4
 80006cc:	4836      	ldr	r0, [pc, #216]	@ (80007a8 <fsm_manual+0x34c>)
 80006ce:	f001 fd38 	bl	8002142 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_RED2, RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2140      	movs	r1, #64	@ 0x40
 80006d6:	4834      	ldr	r0, [pc, #208]	@ (80007a8 <fsm_manual+0x34c>)
 80006d8:	f001 fd33 	bl	8002142 <HAL_GPIO_WritePin>


		if(isButtonPressed(0)==1){
 80006dc:	2000      	movs	r0, #0
 80006de:	f7ff fdb7 	bl	8000250 <isButtonPressed>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d10d      	bne.n	8000704 <fsm_manual+0x2a8>
			temp_YELLOW =0;
 80006e8:	4b2e      	ldr	r3, [pc, #184]	@ (80007a4 <fsm_manual+0x348>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
			mode = MODE1;
 80006ee:	4b2f      	ldr	r3, [pc, #188]	@ (80007ac <fsm_manual+0x350>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	601a      	str	r2, [r3, #0]
			initLedBuffer();
 80006f4:	f000 f866 	bl	80007c4 <initLedBuffer>
			status =0;
 80006f8:	4b2d      	ldr	r3, [pc, #180]	@ (80007b0 <fsm_manual+0x354>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
			num_EN =1;
 80006fe:	4b2d      	ldr	r3, [pc, #180]	@ (80007b4 <fsm_manual+0x358>)
 8000700:	2201      	movs	r2, #1
 8000702:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)==1){
 8000704:	2001      	movs	r0, #1
 8000706:	f7ff fda3 	bl	8000250 <isButtonPressed>
 800070a:	4603      	mov	r3, r0
 800070c:	2b01      	cmp	r3, #1
 800070e:	d10b      	bne.n	8000728 <fsm_manual+0x2cc>
			temp_YELLOW++;
 8000710:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <fsm_manual+0x348>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	4a23      	ldr	r2, [pc, #140]	@ (80007a4 <fsm_manual+0x348>)
 8000718:	6013      	str	r3, [r2, #0]
			if(temp_YELLOW > 98){
 800071a:	4b22      	ldr	r3, [pc, #136]	@ (80007a4 <fsm_manual+0x348>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b62      	cmp	r3, #98	@ 0x62
 8000720:	dd02      	ble.n	8000728 <fsm_manual+0x2cc>
				temp_YELLOW = 0;
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <fsm_manual+0x348>)
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
			}
		}

		if(isButtonPressed(2)== 1 && temp_YELLOW !=0){
 8000728:	2002      	movs	r0, #2
 800072a:	f7ff fd91 	bl	8000250 <isButtonPressed>
 800072e:	4603      	mov	r3, r0
 8000730:	2b01      	cmp	r3, #1
 8000732:	d133      	bne.n	800079c <fsm_manual+0x340>
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <fsm_manual+0x348>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d02f      	beq.n	800079c <fsm_manual+0x340>
			YELLOW_TIME = temp_YELLOW;
 800073c:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <fsm_manual+0x348>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a1d      	ldr	r2, [pc, #116]	@ (80007b8 <fsm_manual+0x35c>)
 8000742:	6013      	str	r3, [r2, #0]
			temp_YELLOW =0;
 8000744:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <fsm_manual+0x348>)
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
			RED_TIME=GREEN_TIME + YELLOW_TIME;
 800074a:	4b1c      	ldr	r3, [pc, #112]	@ (80007bc <fsm_manual+0x360>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4b1a      	ldr	r3, [pc, #104]	@ (80007b8 <fsm_manual+0x35c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4413      	add	r3, r2
 8000754:	4a1a      	ldr	r2, [pc, #104]	@ (80007c0 <fsm_manual+0x364>)
 8000756:	6013      	str	r3, [r2, #0]
			if(RED_TIME >99){
 8000758:	4b19      	ldr	r3, [pc, #100]	@ (80007c0 <fsm_manual+0x364>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b63      	cmp	r3, #99	@ 0x63
 800075e:	dd09      	ble.n	8000774 <fsm_manual+0x318>
				RED_TIME = 99;
 8000760:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <fsm_manual+0x364>)
 8000762:	2263      	movs	r2, #99	@ 0x63
 8000764:	601a      	str	r2, [r3, #0]
				GREEN_TIME = RED_TIME -YELLOW_TIME;
 8000766:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <fsm_manual+0x364>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <fsm_manual+0x35c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	4a12      	ldr	r2, [pc, #72]	@ (80007bc <fsm_manual+0x360>)
 8000772:	6013      	str	r3, [r2, #0]
			}
			initLedBuffer();
 8000774:	f000 f826 	bl	80007c4 <initLedBuffer>
			status =0;
 8000778:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <fsm_manual+0x354>)
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
			num_EN =1;
 800077e:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <fsm_manual+0x358>)
 8000780:	2201      	movs	r2, #1
 8000782:	601a      	str	r2, [r3, #0]
			mode = MODE1;
 8000784:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <fsm_manual+0x350>)
 8000786:	2201      	movs	r2, #1
 8000788:	601a      	str	r2, [r3, #0]
		}
		break;
 800078a:	e007      	b.n	800079c <fsm_manual+0x340>

	default:
		break;
 800078c:	bf00      	nop
 800078e:	e006      	b.n	800079e <fsm_manual+0x342>
		break;
 8000790:	bf00      	nop
 8000792:	e004      	b.n	800079e <fsm_manual+0x342>
		break;
 8000794:	bf00      	nop
 8000796:	e002      	b.n	800079e <fsm_manual+0x342>
		break;
 8000798:	bf00      	nop
 800079a:	e000      	b.n	800079e <fsm_manual+0x342>
		break;
 800079c:	bf00      	nop
	}

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000bc 	.word	0x200000bc
 80007a8:	40010800 	.word	0x40010800
 80007ac:	20000054 	.word	0x20000054
 80007b0:	20000098 	.word	0x20000098
 80007b4:	20000058 	.word	0x20000058
 80007b8:	20000050 	.word	0x20000050
 80007bc:	2000004c 	.word	0x2000004c
 80007c0:	20000048 	.word	0x20000048

080007c4 <initLedBuffer>:

int temp_RED = 0;
int temp_GREEN =0;
int temp_YELLOW = 0;

void initLedBuffer() {
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
	Led_buffer[0] = RED_TIME/10;
 80007c8:	4b27      	ldr	r3, [pc, #156]	@ (8000868 <initLedBuffer+0xa4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a27      	ldr	r2, [pc, #156]	@ (800086c <initLedBuffer+0xa8>)
 80007ce:	fb82 1203 	smull	r1, r2, r2, r3
 80007d2:	1092      	asrs	r2, r2, #2
 80007d4:	17db      	asrs	r3, r3, #31
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	4a25      	ldr	r2, [pc, #148]	@ (8000870 <initLedBuffer+0xac>)
 80007da:	6013      	str	r3, [r2, #0]
	Led_buffer[1] = RED_TIME%10;
 80007dc:	4b22      	ldr	r3, [pc, #136]	@ (8000868 <initLedBuffer+0xa4>)
 80007de:	6819      	ldr	r1, [r3, #0]
 80007e0:	4b22      	ldr	r3, [pc, #136]	@ (800086c <initLedBuffer+0xa8>)
 80007e2:	fb83 2301 	smull	r2, r3, r3, r1
 80007e6:	109a      	asrs	r2, r3, #2
 80007e8:	17cb      	asrs	r3, r1, #31
 80007ea:	1ad2      	subs	r2, r2, r3
 80007ec:	4613      	mov	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4413      	add	r3, r2
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	1aca      	subs	r2, r1, r3
 80007f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000870 <initLedBuffer+0xac>)
 80007f8:	605a      	str	r2, [r3, #4]
	Led_buffer[2] = GREEN_TIME/10;
 80007fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000874 <initLedBuffer+0xb0>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a1b      	ldr	r2, [pc, #108]	@ (800086c <initLedBuffer+0xa8>)
 8000800:	fb82 1203 	smull	r1, r2, r2, r3
 8000804:	1092      	asrs	r2, r2, #2
 8000806:	17db      	asrs	r3, r3, #31
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	4a19      	ldr	r2, [pc, #100]	@ (8000870 <initLedBuffer+0xac>)
 800080c:	6093      	str	r3, [r2, #8]
	Led_buffer[3] = GREEN_TIME%10;
 800080e:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <initLedBuffer+0xb0>)
 8000810:	6819      	ldr	r1, [r3, #0]
 8000812:	4b16      	ldr	r3, [pc, #88]	@ (800086c <initLedBuffer+0xa8>)
 8000814:	fb83 2301 	smull	r2, r3, r3, r1
 8000818:	109a      	asrs	r2, r3, #2
 800081a:	17cb      	asrs	r3, r1, #31
 800081c:	1ad2      	subs	r2, r2, r3
 800081e:	4613      	mov	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	1aca      	subs	r2, r1, r3
 8000828:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <initLedBuffer+0xac>)
 800082a:	60da      	str	r2, [r3, #12]
	Led_buffer[4] = YELLOW_TIME/10;
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <initLedBuffer+0xb4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <initLedBuffer+0xa8>)
 8000832:	fb82 1203 	smull	r1, r2, r2, r3
 8000836:	1092      	asrs	r2, r2, #2
 8000838:	17db      	asrs	r3, r3, #31
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	4a0c      	ldr	r2, [pc, #48]	@ (8000870 <initLedBuffer+0xac>)
 800083e:	6113      	str	r3, [r2, #16]
	Led_buffer[5] = YELLOW_TIME%10;
 8000840:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <initLedBuffer+0xb4>)
 8000842:	6819      	ldr	r1, [r3, #0]
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <initLedBuffer+0xa8>)
 8000846:	fb83 2301 	smull	r2, r3, r3, r1
 800084a:	109a      	asrs	r2, r3, #2
 800084c:	17cb      	asrs	r3, r1, #31
 800084e:	1ad2      	subs	r2, r2, r3
 8000850:	4613      	mov	r3, r2
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	4413      	add	r3, r2
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	1aca      	subs	r2, r1, r3
 800085a:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <initLedBuffer+0xac>)
 800085c:	615a      	str	r2, [r3, #20]
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000048 	.word	0x20000048
 800086c:	66666667 	.word	0x66666667
 8000870:	2000009c 	.word	0x2000009c
 8000874:	2000004c 	.word	0x2000004c
 8000878:	20000050 	.word	0x20000050

0800087c <Lab4_Init>:





void Lab4_Init(void) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0

    // Kích hoạt xung nhịp cho GPIOA và GPIOB
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b27      	ldr	r3, [pc, #156]	@ (8000920 <Lab4_Init+0xa4>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	4a26      	ldr	r2, [pc, #152]	@ (8000920 <Lab4_Init+0xa4>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6193      	str	r3, [r2, #24]
 800088e:	4b24      	ldr	r3, [pc, #144]	@ (8000920 <Lab4_Init+0xa4>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	4b21      	ldr	r3, [pc, #132]	@ (8000920 <Lab4_Init+0xa4>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4a20      	ldr	r2, [pc, #128]	@ (8000920 <Lab4_Init+0xa4>)
 80008a0:	f043 0308 	orr.w	r3, r3, #8
 80008a4:	6193      	str	r3, [r2, #24]
 80008a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <Lab4_Init+0xa4>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]

    // Cấu hình GPIO cho các đèn LED và EN trên cổng A
		GPIO_InitStruct.Pin = LED_RED | LED_RED1 | LED_RED2 | LED_GREEN1 | LED_GREEN2 | LED_YELLOW1 | LED_YELLOW2
 80008c0:	f24f 13fc 	movw	r3, #61948	@ 0xf1fc
 80008c4:	60bb      	str	r3, [r7, #8]
							  | EN_0 | EN_1 | EN_2 | EN_3;
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2302      	movs	r3, #2
 80008d0:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	4619      	mov	r1, r3
 80008d8:	4812      	ldr	r0, [pc, #72]	@ (8000924 <Lab4_Init+0xa8>)
 80008da:	f001 fa9f 	bl	8001e1c <HAL_GPIO_Init>

    // Cấu hình GPIO cho các nút bấm (BUTTON) trên cổng A
		GPIO_InitStruct.Pin = BUTTON0 | BUTTON1 | BUTTON2;
 80008de:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80008e2:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_PULLUP;  // Kéo lên nội bộ
 80008e8:	2301      	movs	r3, #1
 80008ea:	613b      	str	r3, [r7, #16]
		// Không cần đặt lại tốc độ khi dùng chế độ INPUT
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0308 	add.w	r3, r7, #8
 80008f0:	4619      	mov	r1, r3
 80008f2:	480c      	ldr	r0, [pc, #48]	@ (8000924 <Lab4_Init+0xa8>)
 80008f4:	f001 fa92 	bl	8001e1c <HAL_GPIO_Init>

    // Cấu hình GPIO cho các SEG1ment của 7 đoạn (SEG1) trên cổng B
		GPIO_InitStruct.Pin = SEG1_0 | SEG1_1 | SEG1_2 | SEG1_3 | SEG1_4 | SEG1_5 | SEG1_6|
 80008f8:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 80008fc:	60bb      	str	r3, [r7, #8]
				SEG2_0 | SEG2_1 | SEG2_2 | SEG2_3 | SEG2_4 | SEG2_5 | SEG2_6;

		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2302      	movs	r3, #2
 8000908:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	@ (8000928 <Lab4_Init+0xac>)
 8000912:	f001 fa83 	bl	8001e1c <HAL_GPIO_Init>
}
 8000916:	bf00      	nop
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000
 8000924:	40010800 	.word	0x40010800
 8000928:	40010c00 	.word	0x40010c00

0800092c <setEN>:
 */

#include "led7_segment.h"


void setEN(){
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	switch(num){
 8000930:	4b20      	ldr	r3, [pc, #128]	@ (80009b4 <setEN+0x88>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d002      	beq.n	800093e <setEN+0x12>
 8000938:	2b02      	cmp	r3, #2
 800093a:	d01c      	beq.n	8000976 <setEN+0x4a>
//		HAL_GPIO_WritePin(GPIOA, EN_0, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOA, EN_1, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOA, EN_2, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOA, EN_3, GPIO_PIN_RESET);
	}
}
 800093c:	e037      	b.n	80009ae <setEN+0x82>
		HAL_GPIO_WritePin(GPIOA, EN_0, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000944:	481c      	ldr	r0, [pc, #112]	@ (80009b8 <setEN+0x8c>)
 8000946:	f001 fbfc 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_1, GPIO_PIN_SET);
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000950:	4819      	ldr	r0, [pc, #100]	@ (80009b8 <setEN+0x8c>)
 8000952:	f001 fbf6 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_2, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800095c:	4816      	ldr	r0, [pc, #88]	@ (80009b8 <setEN+0x8c>)
 800095e:	f001 fbf0 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_3, GPIO_PIN_SET);
 8000962:	2201      	movs	r2, #1
 8000964:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000968:	4813      	ldr	r0, [pc, #76]	@ (80009b8 <setEN+0x8c>)
 800096a:	f001 fbea 	bl	8002142 <HAL_GPIO_WritePin>
		num = 2;
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <setEN+0x88>)
 8000970:	2202      	movs	r2, #2
 8000972:	601a      	str	r2, [r3, #0]
		break;
 8000974:	e01b      	b.n	80009ae <setEN+0x82>
		HAL_GPIO_WritePin(GPIOA, EN_0, GPIO_PIN_SET);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800097c:	480e      	ldr	r0, [pc, #56]	@ (80009b8 <setEN+0x8c>)
 800097e:	f001 fbe0 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_1, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000988:	480b      	ldr	r0, [pc, #44]	@ (80009b8 <setEN+0x8c>)
 800098a:	f001 fbda 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_2, GPIO_PIN_SET);
 800098e:	2201      	movs	r2, #1
 8000990:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000994:	4808      	ldr	r0, [pc, #32]	@ (80009b8 <setEN+0x8c>)
 8000996:	f001 fbd4 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_3, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009a0:	4805      	ldr	r0, [pc, #20]	@ (80009b8 <setEN+0x8c>)
 80009a2:	f001 fbce 	bl	8002142 <HAL_GPIO_WritePin>
		num = 1;
 80009a6:	4b03      	ldr	r3, [pc, #12]	@ (80009b4 <setEN+0x88>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	601a      	str	r2, [r3, #0]
		break;
 80009ac:	bf00      	nop
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2000005c 	.word	0x2000005c
 80009b8:	40010800 	.word	0x40010800

080009bc <display7SEG2>:

void display7SEG2(int num_SEG2){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	switch (num_SEG2){
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b09      	cmp	r3, #9
 80009c8:	f200 81bc 	bhi.w	8000d44 <display7SEG2+0x388>
 80009cc:	a201      	add	r2, pc, #4	@ (adr r2, 80009d4 <display7SEG2+0x18>)
 80009ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d2:	bf00      	nop
 80009d4:	080009fd 	.word	0x080009fd
 80009d8:	08000a51 	.word	0x08000a51
 80009dc:	08000aa5 	.word	0x08000aa5
 80009e0:	08000af9 	.word	0x08000af9
 80009e4:	08000b4d 	.word	0x08000b4d
 80009e8:	08000ba1 	.word	0x08000ba1
 80009ec:	08000bf5 	.word	0x08000bf5
 80009f0:	08000c49 	.word	0x08000c49
 80009f4:	08000c9d 	.word	0x08000c9d
 80009f8:	08000cf1 	.word	0x08000cf1
		case 0:
				HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2180      	movs	r1, #128	@ 0x80
 8000a00:	48d2      	ldr	r0, [pc, #840]	@ (8000d4c <display7SEG2+0x390>)
 8000a02:	f001 fb9e 	bl	8002142 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a0c:	48cf      	ldr	r0, [pc, #828]	@ (8000d4c <display7SEG2+0x390>)
 8000a0e:	f001 fb98 	bl	8002142 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a18:	48cc      	ldr	r0, [pc, #816]	@ (8000d4c <display7SEG2+0x390>)
 8000a1a:	f001 fb92 	bl	8002142 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a24:	48c9      	ldr	r0, [pc, #804]	@ (8000d4c <display7SEG2+0x390>)
 8000a26:	f001 fb8c 	bl	8002142 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a30:	48c6      	ldr	r0, [pc, #792]	@ (8000d4c <display7SEG2+0x390>)
 8000a32:	f001 fb86 	bl	8002142 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a3c:	48c3      	ldr	r0, [pc, #780]	@ (8000d4c <display7SEG2+0x390>)
 8000a3e:	f001 fb80 	bl	8002142 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a48:	48c0      	ldr	r0, [pc, #768]	@ (8000d4c <display7SEG2+0x390>)
 8000a4a:	f001 fb7a 	bl	8002142 <HAL_GPIO_WritePin>

				break;
 8000a4e:	e179      	b.n	8000d44 <display7SEG2+0x388>
		case 1:
					HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	2180      	movs	r1, #128	@ 0x80
 8000a54:	48bd      	ldr	r0, [pc, #756]	@ (8000d4c <display7SEG2+0x390>)
 8000a56:	f001 fb74 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a60:	48ba      	ldr	r0, [pc, #744]	@ (8000d4c <display7SEG2+0x390>)
 8000a62:	f001 fb6e 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a6c:	48b7      	ldr	r0, [pc, #732]	@ (8000d4c <display7SEG2+0x390>)
 8000a6e:	f001 fb68 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a78:	48b4      	ldr	r0, [pc, #720]	@ (8000d4c <display7SEG2+0x390>)
 8000a7a:	f001 fb62 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a84:	48b1      	ldr	r0, [pc, #708]	@ (8000d4c <display7SEG2+0x390>)
 8000a86:	f001 fb5c 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a90:	48ae      	ldr	r0, [pc, #696]	@ (8000d4c <display7SEG2+0x390>)
 8000a92:	f001 fb56 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_SET);
 8000a96:	2201      	movs	r2, #1
 8000a98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a9c:	48ab      	ldr	r0, [pc, #684]	@ (8000d4c <display7SEG2+0x390>)
 8000a9e:	f001 fb50 	bl	8002142 <HAL_GPIO_WritePin>

				break;
 8000aa2:	e14f      	b.n	8000d44 <display7SEG2+0x388>

		case 2:
					HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2180      	movs	r1, #128	@ 0x80
 8000aa8:	48a8      	ldr	r0, [pc, #672]	@ (8000d4c <display7SEG2+0x390>)
 8000aaa:	f001 fb4a 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ab4:	48a5      	ldr	r0, [pc, #660]	@ (8000d4c <display7SEG2+0x390>)
 8000ab6:	f001 fb44 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ac0:	48a2      	ldr	r0, [pc, #648]	@ (8000d4c <display7SEG2+0x390>)
 8000ac2:	f001 fb3e 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000acc:	489f      	ldr	r0, [pc, #636]	@ (8000d4c <display7SEG2+0x390>)
 8000ace:	f001 fb38 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ad8:	489c      	ldr	r0, [pc, #624]	@ (8000d4c <display7SEG2+0x390>)
 8000ada:	f001 fb32 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ae4:	4899      	ldr	r0, [pc, #612]	@ (8000d4c <display7SEG2+0x390>)
 8000ae6:	f001 fb2c 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000af0:	4896      	ldr	r0, [pc, #600]	@ (8000d4c <display7SEG2+0x390>)
 8000af2:	f001 fb26 	bl	8002142 <HAL_GPIO_WritePin>

				break;
 8000af6:	e125      	b.n	8000d44 <display7SEG2+0x388>
		case 3:
					HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2180      	movs	r1, #128	@ 0x80
 8000afc:	4893      	ldr	r0, [pc, #588]	@ (8000d4c <display7SEG2+0x390>)
 8000afe:	f001 fb20 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b08:	4890      	ldr	r0, [pc, #576]	@ (8000d4c <display7SEG2+0x390>)
 8000b0a:	f001 fb1a 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b14:	488d      	ldr	r0, [pc, #564]	@ (8000d4c <display7SEG2+0x390>)
 8000b16:	f001 fb14 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b20:	488a      	ldr	r0, [pc, #552]	@ (8000d4c <display7SEG2+0x390>)
 8000b22:	f001 fb0e 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b2c:	4887      	ldr	r0, [pc, #540]	@ (8000d4c <display7SEG2+0x390>)
 8000b2e:	f001 fb08 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b38:	4884      	ldr	r0, [pc, #528]	@ (8000d4c <display7SEG2+0x390>)
 8000b3a:	f001 fb02 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b44:	4881      	ldr	r0, [pc, #516]	@ (8000d4c <display7SEG2+0x390>)
 8000b46:	f001 fafc 	bl	8002142 <HAL_GPIO_WritePin>

				break;
 8000b4a:	e0fb      	b.n	8000d44 <display7SEG2+0x388>
		case 4:
						HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2180      	movs	r1, #128	@ 0x80
 8000b50:	487e      	ldr	r0, [pc, #504]	@ (8000d4c <display7SEG2+0x390>)
 8000b52:	f001 faf6 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b5c:	487b      	ldr	r0, [pc, #492]	@ (8000d4c <display7SEG2+0x390>)
 8000b5e:	f001 faf0 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b68:	4878      	ldr	r0, [pc, #480]	@ (8000d4c <display7SEG2+0x390>)
 8000b6a:	f001 faea 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b74:	4875      	ldr	r0, [pc, #468]	@ (8000d4c <display7SEG2+0x390>)
 8000b76:	f001 fae4 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b80:	4872      	ldr	r0, [pc, #456]	@ (8000d4c <display7SEG2+0x390>)
 8000b82:	f001 fade 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b8c:	486f      	ldr	r0, [pc, #444]	@ (8000d4c <display7SEG2+0x390>)
 8000b8e:	f001 fad8 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b98:	486c      	ldr	r0, [pc, #432]	@ (8000d4c <display7SEG2+0x390>)
 8000b9a:	f001 fad2 	bl	8002142 <HAL_GPIO_WritePin>

					break;
 8000b9e:	e0d1      	b.n	8000d44 <display7SEG2+0x388>
		case 5:
						HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2180      	movs	r1, #128	@ 0x80
 8000ba4:	4869      	ldr	r0, [pc, #420]	@ (8000d4c <display7SEG2+0x390>)
 8000ba6:	f001 facc 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_SET);
 8000baa:	2201      	movs	r2, #1
 8000bac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bb0:	4866      	ldr	r0, [pc, #408]	@ (8000d4c <display7SEG2+0x390>)
 8000bb2:	f001 fac6 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bbc:	4863      	ldr	r0, [pc, #396]	@ (8000d4c <display7SEG2+0x390>)
 8000bbe:	f001 fac0 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bc8:	4860      	ldr	r0, [pc, #384]	@ (8000d4c <display7SEG2+0x390>)
 8000bca:	f001 faba 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bd4:	485d      	ldr	r0, [pc, #372]	@ (8000d4c <display7SEG2+0x390>)
 8000bd6:	f001 fab4 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000be0:	485a      	ldr	r0, [pc, #360]	@ (8000d4c <display7SEG2+0x390>)
 8000be2:	f001 faae 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bec:	4857      	ldr	r0, [pc, #348]	@ (8000d4c <display7SEG2+0x390>)
 8000bee:	f001 faa8 	bl	8002142 <HAL_GPIO_WritePin>

					break;
 8000bf2:	e0a7      	b.n	8000d44 <display7SEG2+0x388>
		case 6:
						HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2180      	movs	r1, #128	@ 0x80
 8000bf8:	4854      	ldr	r0, [pc, #336]	@ (8000d4c <display7SEG2+0x390>)
 8000bfa:	f001 faa2 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c04:	4851      	ldr	r0, [pc, #324]	@ (8000d4c <display7SEG2+0x390>)
 8000c06:	f001 fa9c 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c10:	484e      	ldr	r0, [pc, #312]	@ (8000d4c <display7SEG2+0x390>)
 8000c12:	f001 fa96 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c1c:	484b      	ldr	r0, [pc, #300]	@ (8000d4c <display7SEG2+0x390>)
 8000c1e:	f001 fa90 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c28:	4848      	ldr	r0, [pc, #288]	@ (8000d4c <display7SEG2+0x390>)
 8000c2a:	f001 fa8a 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c34:	4845      	ldr	r0, [pc, #276]	@ (8000d4c <display7SEG2+0x390>)
 8000c36:	f001 fa84 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c40:	4842      	ldr	r0, [pc, #264]	@ (8000d4c <display7SEG2+0x390>)
 8000c42:	f001 fa7e 	bl	8002142 <HAL_GPIO_WritePin>

					break;
 8000c46:	e07d      	b.n	8000d44 <display7SEG2+0x388>
		case 7:
						HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2180      	movs	r1, #128	@ 0x80
 8000c4c:	483f      	ldr	r0, [pc, #252]	@ (8000d4c <display7SEG2+0x390>)
 8000c4e:	f001 fa78 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c58:	483c      	ldr	r0, [pc, #240]	@ (8000d4c <display7SEG2+0x390>)
 8000c5a:	f001 fa72 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c64:	4839      	ldr	r0, [pc, #228]	@ (8000d4c <display7SEG2+0x390>)
 8000c66:	f001 fa6c 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c70:	4836      	ldr	r0, [pc, #216]	@ (8000d4c <display7SEG2+0x390>)
 8000c72:	f001 fa66 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c7c:	4833      	ldr	r0, [pc, #204]	@ (8000d4c <display7SEG2+0x390>)
 8000c7e:	f001 fa60 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c88:	4830      	ldr	r0, [pc, #192]	@ (8000d4c <display7SEG2+0x390>)
 8000c8a:	f001 fa5a 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c94:	482d      	ldr	r0, [pc, #180]	@ (8000d4c <display7SEG2+0x390>)
 8000c96:	f001 fa54 	bl	8002142 <HAL_GPIO_WritePin>

					break;
 8000c9a:	e053      	b.n	8000d44 <display7SEG2+0x388>
		case 8:
						HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2180      	movs	r1, #128	@ 0x80
 8000ca0:	482a      	ldr	r0, [pc, #168]	@ (8000d4c <display7SEG2+0x390>)
 8000ca2:	f001 fa4e 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cac:	4827      	ldr	r0, [pc, #156]	@ (8000d4c <display7SEG2+0x390>)
 8000cae:	f001 fa48 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cb8:	4824      	ldr	r0, [pc, #144]	@ (8000d4c <display7SEG2+0x390>)
 8000cba:	f001 fa42 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cc4:	4821      	ldr	r0, [pc, #132]	@ (8000d4c <display7SEG2+0x390>)
 8000cc6:	f001 fa3c 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cd0:	481e      	ldr	r0, [pc, #120]	@ (8000d4c <display7SEG2+0x390>)
 8000cd2:	f001 fa36 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cdc:	481b      	ldr	r0, [pc, #108]	@ (8000d4c <display7SEG2+0x390>)
 8000cde:	f001 fa30 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ce8:	4818      	ldr	r0, [pc, #96]	@ (8000d4c <display7SEG2+0x390>)
 8000cea:	f001 fa2a 	bl	8002142 <HAL_GPIO_WritePin>

					break;
 8000cee:	e029      	b.n	8000d44 <display7SEG2+0x388>
		case 9:
						HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2180      	movs	r1, #128	@ 0x80
 8000cf4:	4815      	ldr	r0, [pc, #84]	@ (8000d4c <display7SEG2+0x390>)
 8000cf6:	f001 fa24 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d00:	4812      	ldr	r0, [pc, #72]	@ (8000d4c <display7SEG2+0x390>)
 8000d02:	f001 fa1e 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d0c:	480f      	ldr	r0, [pc, #60]	@ (8000d4c <display7SEG2+0x390>)
 8000d0e:	f001 fa18 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d18:	480c      	ldr	r0, [pc, #48]	@ (8000d4c <display7SEG2+0x390>)
 8000d1a:	f001 fa12 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d24:	4809      	ldr	r0, [pc, #36]	@ (8000d4c <display7SEG2+0x390>)
 8000d26:	f001 fa0c 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d30:	4806      	ldr	r0, [pc, #24]	@ (8000d4c <display7SEG2+0x390>)
 8000d32:	f001 fa06 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d3c:	4803      	ldr	r0, [pc, #12]	@ (8000d4c <display7SEG2+0x390>)
 8000d3e:	f001 fa00 	bl	8002142 <HAL_GPIO_WritePin>

					break;
 8000d42:	bf00      	nop
	}

}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40010c00 	.word	0x40010c00

08000d50 <display7SEG1>:

void display7SEG1(int num_SEG1){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	switch (num_SEG1){
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b09      	cmp	r3, #9
 8000d5c:	f200 8180 	bhi.w	8001060 <display7SEG1+0x310>
 8000d60:	a201      	add	r2, pc, #4	@ (adr r2, 8000d68 <display7SEG1+0x18>)
 8000d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d66:	bf00      	nop
 8000d68:	08000d91 	.word	0x08000d91
 8000d6c:	08000dd9 	.word	0x08000dd9
 8000d70:	08000e21 	.word	0x08000e21
 8000d74:	08000e69 	.word	0x08000e69
 8000d78:	08000eb1 	.word	0x08000eb1
 8000d7c:	08000ef9 	.word	0x08000ef9
 8000d80:	08000f41 	.word	0x08000f41
 8000d84:	08000f89 	.word	0x08000f89
 8000d88:	08000fd1 	.word	0x08000fd1
 8000d8c:	08001019 	.word	0x08001019
		case 0:
				HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2101      	movs	r1, #1
 8000d94:	48b4      	ldr	r0, [pc, #720]	@ (8001068 <display7SEG1+0x318>)
 8000d96:	f001 f9d4 	bl	8002142 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	48b2      	ldr	r0, [pc, #712]	@ (8001068 <display7SEG1+0x318>)
 8000da0:	f001 f9cf 	bl	8002142 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2104      	movs	r1, #4
 8000da8:	48af      	ldr	r0, [pc, #700]	@ (8001068 <display7SEG1+0x318>)
 8000daa:	f001 f9ca 	bl	8002142 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2108      	movs	r1, #8
 8000db2:	48ad      	ldr	r0, [pc, #692]	@ (8001068 <display7SEG1+0x318>)
 8000db4:	f001 f9c5 	bl	8002142 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2110      	movs	r1, #16
 8000dbc:	48aa      	ldr	r0, [pc, #680]	@ (8001068 <display7SEG1+0x318>)
 8000dbe:	f001 f9c0 	bl	8002142 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2120      	movs	r1, #32
 8000dc6:	48a8      	ldr	r0, [pc, #672]	@ (8001068 <display7SEG1+0x318>)
 8000dc8:	f001 f9bb 	bl	8002142 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2140      	movs	r1, #64	@ 0x40
 8000dd0:	48a5      	ldr	r0, [pc, #660]	@ (8001068 <display7SEG1+0x318>)
 8000dd2:	f001 f9b6 	bl	8002142 <HAL_GPIO_WritePin>

				break;
 8000dd6:	e143      	b.n	8001060 <display7SEG1+0x310>
		case 1:
					HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2101      	movs	r1, #1
 8000ddc:	48a2      	ldr	r0, [pc, #648]	@ (8001068 <display7SEG1+0x318>)
 8000dde:	f001 f9b0 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2102      	movs	r1, #2
 8000de6:	48a0      	ldr	r0, [pc, #640]	@ (8001068 <display7SEG1+0x318>)
 8000de8:	f001 f9ab 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2104      	movs	r1, #4
 8000df0:	489d      	ldr	r0, [pc, #628]	@ (8001068 <display7SEG1+0x318>)
 8000df2:	f001 f9a6 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	2108      	movs	r1, #8
 8000dfa:	489b      	ldr	r0, [pc, #620]	@ (8001068 <display7SEG1+0x318>)
 8000dfc:	f001 f9a1 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	2110      	movs	r1, #16
 8000e04:	4898      	ldr	r0, [pc, #608]	@ (8001068 <display7SEG1+0x318>)
 8000e06:	f001 f99c 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2120      	movs	r1, #32
 8000e0e:	4896      	ldr	r0, [pc, #600]	@ (8001068 <display7SEG1+0x318>)
 8000e10:	f001 f997 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2140      	movs	r1, #64	@ 0x40
 8000e18:	4893      	ldr	r0, [pc, #588]	@ (8001068 <display7SEG1+0x318>)
 8000e1a:	f001 f992 	bl	8002142 <HAL_GPIO_WritePin>

				break;
 8000e1e:	e11f      	b.n	8001060 <display7SEG1+0x310>

		case 2:
					HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2101      	movs	r1, #1
 8000e24:	4890      	ldr	r0, [pc, #576]	@ (8001068 <display7SEG1+0x318>)
 8000e26:	f001 f98c 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	488e      	ldr	r0, [pc, #568]	@ (8001068 <display7SEG1+0x318>)
 8000e30:	f001 f987 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2104      	movs	r1, #4
 8000e38:	488b      	ldr	r0, [pc, #556]	@ (8001068 <display7SEG1+0x318>)
 8000e3a:	f001 f982 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2108      	movs	r1, #8
 8000e42:	4889      	ldr	r0, [pc, #548]	@ (8001068 <display7SEG1+0x318>)
 8000e44:	f001 f97d 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	4886      	ldr	r0, [pc, #536]	@ (8001068 <display7SEG1+0x318>)
 8000e4e:	f001 f978 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2120      	movs	r1, #32
 8000e56:	4884      	ldr	r0, [pc, #528]	@ (8001068 <display7SEG1+0x318>)
 8000e58:	f001 f973 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2140      	movs	r1, #64	@ 0x40
 8000e60:	4881      	ldr	r0, [pc, #516]	@ (8001068 <display7SEG1+0x318>)
 8000e62:	f001 f96e 	bl	8002142 <HAL_GPIO_WritePin>

				break;
 8000e66:	e0fb      	b.n	8001060 <display7SEG1+0x310>
		case 3:
					HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	487e      	ldr	r0, [pc, #504]	@ (8001068 <display7SEG1+0x318>)
 8000e6e:	f001 f968 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2102      	movs	r1, #2
 8000e76:	487c      	ldr	r0, [pc, #496]	@ (8001068 <display7SEG1+0x318>)
 8000e78:	f001 f963 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2104      	movs	r1, #4
 8000e80:	4879      	ldr	r0, [pc, #484]	@ (8001068 <display7SEG1+0x318>)
 8000e82:	f001 f95e 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2108      	movs	r1, #8
 8000e8a:	4877      	ldr	r0, [pc, #476]	@ (8001068 <display7SEG1+0x318>)
 8000e8c:	f001 f959 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	2110      	movs	r1, #16
 8000e94:	4874      	ldr	r0, [pc, #464]	@ (8001068 <display7SEG1+0x318>)
 8000e96:	f001 f954 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_SET);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2120      	movs	r1, #32
 8000e9e:	4872      	ldr	r0, [pc, #456]	@ (8001068 <display7SEG1+0x318>)
 8000ea0:	f001 f94f 	bl	8002142 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2140      	movs	r1, #64	@ 0x40
 8000ea8:	486f      	ldr	r0, [pc, #444]	@ (8001068 <display7SEG1+0x318>)
 8000eaa:	f001 f94a 	bl	8002142 <HAL_GPIO_WritePin>

				break;
 8000eae:	e0d7      	b.n	8001060 <display7SEG1+0x310>
		case 4:
						HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	486c      	ldr	r0, [pc, #432]	@ (8001068 <display7SEG1+0x318>)
 8000eb6:	f001 f944 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	486a      	ldr	r0, [pc, #424]	@ (8001068 <display7SEG1+0x318>)
 8000ec0:	f001 f93f 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	4867      	ldr	r0, [pc, #412]	@ (8001068 <display7SEG1+0x318>)
 8000eca:	f001 f93a 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_SET);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2108      	movs	r1, #8
 8000ed2:	4865      	ldr	r0, [pc, #404]	@ (8001068 <display7SEG1+0x318>)
 8000ed4:	f001 f935 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2110      	movs	r1, #16
 8000edc:	4862      	ldr	r0, [pc, #392]	@ (8001068 <display7SEG1+0x318>)
 8000ede:	f001 f930 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2120      	movs	r1, #32
 8000ee6:	4860      	ldr	r0, [pc, #384]	@ (8001068 <display7SEG1+0x318>)
 8000ee8:	f001 f92b 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2140      	movs	r1, #64	@ 0x40
 8000ef0:	485d      	ldr	r0, [pc, #372]	@ (8001068 <display7SEG1+0x318>)
 8000ef2:	f001 f926 	bl	8002142 <HAL_GPIO_WritePin>

					break;
 8000ef6:	e0b3      	b.n	8001060 <display7SEG1+0x310>
		case 5:
						HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2101      	movs	r1, #1
 8000efc:	485a      	ldr	r0, [pc, #360]	@ (8001068 <display7SEG1+0x318>)
 8000efe:	f001 f920 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	2102      	movs	r1, #2
 8000f06:	4858      	ldr	r0, [pc, #352]	@ (8001068 <display7SEG1+0x318>)
 8000f08:	f001 f91b 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2104      	movs	r1, #4
 8000f10:	4855      	ldr	r0, [pc, #340]	@ (8001068 <display7SEG1+0x318>)
 8000f12:	f001 f916 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2108      	movs	r1, #8
 8000f1a:	4853      	ldr	r0, [pc, #332]	@ (8001068 <display7SEG1+0x318>)
 8000f1c:	f001 f911 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2110      	movs	r1, #16
 8000f24:	4850      	ldr	r0, [pc, #320]	@ (8001068 <display7SEG1+0x318>)
 8000f26:	f001 f90c 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2120      	movs	r1, #32
 8000f2e:	484e      	ldr	r0, [pc, #312]	@ (8001068 <display7SEG1+0x318>)
 8000f30:	f001 f907 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2140      	movs	r1, #64	@ 0x40
 8000f38:	484b      	ldr	r0, [pc, #300]	@ (8001068 <display7SEG1+0x318>)
 8000f3a:	f001 f902 	bl	8002142 <HAL_GPIO_WritePin>

					break;
 8000f3e:	e08f      	b.n	8001060 <display7SEG1+0x310>
		case 6:
						HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2101      	movs	r1, #1
 8000f44:	4848      	ldr	r0, [pc, #288]	@ (8001068 <display7SEG1+0x318>)
 8000f46:	f001 f8fc 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	4846      	ldr	r0, [pc, #280]	@ (8001068 <display7SEG1+0x318>)
 8000f50:	f001 f8f7 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2104      	movs	r1, #4
 8000f58:	4843      	ldr	r0, [pc, #268]	@ (8001068 <display7SEG1+0x318>)
 8000f5a:	f001 f8f2 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2108      	movs	r1, #8
 8000f62:	4841      	ldr	r0, [pc, #260]	@ (8001068 <display7SEG1+0x318>)
 8000f64:	f001 f8ed 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2110      	movs	r1, #16
 8000f6c:	483e      	ldr	r0, [pc, #248]	@ (8001068 <display7SEG1+0x318>)
 8000f6e:	f001 f8e8 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2120      	movs	r1, #32
 8000f76:	483c      	ldr	r0, [pc, #240]	@ (8001068 <display7SEG1+0x318>)
 8000f78:	f001 f8e3 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2140      	movs	r1, #64	@ 0x40
 8000f80:	4839      	ldr	r0, [pc, #228]	@ (8001068 <display7SEG1+0x318>)
 8000f82:	f001 f8de 	bl	8002142 <HAL_GPIO_WritePin>

					break;
 8000f86:	e06b      	b.n	8001060 <display7SEG1+0x310>
		case 7:
						HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	4836      	ldr	r0, [pc, #216]	@ (8001068 <display7SEG1+0x318>)
 8000f8e:	f001 f8d8 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2102      	movs	r1, #2
 8000f96:	4834      	ldr	r0, [pc, #208]	@ (8001068 <display7SEG1+0x318>)
 8000f98:	f001 f8d3 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	4831      	ldr	r0, [pc, #196]	@ (8001068 <display7SEG1+0x318>)
 8000fa2:	f001 f8ce 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2108      	movs	r1, #8
 8000faa:	482f      	ldr	r0, [pc, #188]	@ (8001068 <display7SEG1+0x318>)
 8000fac:	f001 f8c9 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2110      	movs	r1, #16
 8000fb4:	482c      	ldr	r0, [pc, #176]	@ (8001068 <display7SEG1+0x318>)
 8000fb6:	f001 f8c4 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2120      	movs	r1, #32
 8000fbe:	482a      	ldr	r0, [pc, #168]	@ (8001068 <display7SEG1+0x318>)
 8000fc0:	f001 f8bf 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2140      	movs	r1, #64	@ 0x40
 8000fc8:	4827      	ldr	r0, [pc, #156]	@ (8001068 <display7SEG1+0x318>)
 8000fca:	f001 f8ba 	bl	8002142 <HAL_GPIO_WritePin>

					break;
 8000fce:	e047      	b.n	8001060 <display7SEG1+0x310>
		case 8:
						HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4824      	ldr	r0, [pc, #144]	@ (8001068 <display7SEG1+0x318>)
 8000fd6:	f001 f8b4 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4822      	ldr	r0, [pc, #136]	@ (8001068 <display7SEG1+0x318>)
 8000fe0:	f001 f8af 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2104      	movs	r1, #4
 8000fe8:	481f      	ldr	r0, [pc, #124]	@ (8001068 <display7SEG1+0x318>)
 8000fea:	f001 f8aa 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	481d      	ldr	r0, [pc, #116]	@ (8001068 <display7SEG1+0x318>)
 8000ff4:	f001 f8a5 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2110      	movs	r1, #16
 8000ffc:	481a      	ldr	r0, [pc, #104]	@ (8001068 <display7SEG1+0x318>)
 8000ffe:	f001 f8a0 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	2120      	movs	r1, #32
 8001006:	4818      	ldr	r0, [pc, #96]	@ (8001068 <display7SEG1+0x318>)
 8001008:	f001 f89b 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	2140      	movs	r1, #64	@ 0x40
 8001010:	4815      	ldr	r0, [pc, #84]	@ (8001068 <display7SEG1+0x318>)
 8001012:	f001 f896 	bl	8002142 <HAL_GPIO_WritePin>

					break;
 8001016:	e023      	b.n	8001060 <display7SEG1+0x310>
		case 9:
						HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2101      	movs	r1, #1
 800101c:	4812      	ldr	r0, [pc, #72]	@ (8001068 <display7SEG1+0x318>)
 800101e:	f001 f890 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	2102      	movs	r1, #2
 8001026:	4810      	ldr	r0, [pc, #64]	@ (8001068 <display7SEG1+0x318>)
 8001028:	f001 f88b 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	2104      	movs	r1, #4
 8001030:	480d      	ldr	r0, [pc, #52]	@ (8001068 <display7SEG1+0x318>)
 8001032:	f001 f886 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2108      	movs	r1, #8
 800103a:	480b      	ldr	r0, [pc, #44]	@ (8001068 <display7SEG1+0x318>)
 800103c:	f001 f881 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	2110      	movs	r1, #16
 8001044:	4808      	ldr	r0, [pc, #32]	@ (8001068 <display7SEG1+0x318>)
 8001046:	f001 f87c 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2120      	movs	r1, #32
 800104e:	4806      	ldr	r0, [pc, #24]	@ (8001068 <display7SEG1+0x318>)
 8001050:	f001 f877 	bl	8002142 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2140      	movs	r1, #64	@ 0x40
 8001058:	4803      	ldr	r0, [pc, #12]	@ (8001068 <display7SEG1+0x318>)
 800105a:	f001 f872 	bl	8002142 <HAL_GPIO_WritePin>

					break;
 800105e:	bf00      	nop
	}

}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40010c00 	.word	0x40010c00

0800106c <display7SEG_YELLOW_RED>:

void display7SEG_YELLOW_RED(){
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	switch(num_EN){
 8001070:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <display7SEG_YELLOW_RED+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d002      	beq.n	800107e <display7SEG_YELLOW_RED+0x12>
 8001078:	2b02      	cmp	r3, #2
 800107a:	d00e      	beq.n	800109a <display7SEG_YELLOW_RED+0x2e>
					Led_buffer[1]--;
					Led_buffer[5]--;
					num_EN =1;
				break;
}
}
 800107c:	e025      	b.n	80010ca <display7SEG_YELLOW_RED+0x5e>
				display7SEG1(Led_buffer[4]);
 800107e:	4b15      	ldr	r3, [pc, #84]	@ (80010d4 <display7SEG_YELLOW_RED+0x68>)
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fe64 	bl	8000d50 <display7SEG1>
				display7SEG2(Led_buffer[0]);
 8001088:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <display7SEG_YELLOW_RED+0x68>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fc95 	bl	80009bc <display7SEG2>
					num_EN =2;
 8001092:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <display7SEG_YELLOW_RED+0x64>)
 8001094:	2202      	movs	r2, #2
 8001096:	601a      	str	r2, [r3, #0]
				break;
 8001098:	e017      	b.n	80010ca <display7SEG_YELLOW_RED+0x5e>
				display7SEG1(Led_buffer[5]);
 800109a:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <display7SEG_YELLOW_RED+0x68>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fe56 	bl	8000d50 <display7SEG1>
				display7SEG2(Led_buffer[1]);
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <display7SEG_YELLOW_RED+0x68>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fc87 	bl	80009bc <display7SEG2>
					Led_buffer[1]--;
 80010ae:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <display7SEG_YELLOW_RED+0x68>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	4a07      	ldr	r2, [pc, #28]	@ (80010d4 <display7SEG_YELLOW_RED+0x68>)
 80010b6:	6053      	str	r3, [r2, #4]
					Led_buffer[5]--;
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <display7SEG_YELLOW_RED+0x68>)
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	3b01      	subs	r3, #1
 80010be:	4a05      	ldr	r2, [pc, #20]	@ (80010d4 <display7SEG_YELLOW_RED+0x68>)
 80010c0:	6153      	str	r3, [r2, #20]
					num_EN =1;
 80010c2:	4b03      	ldr	r3, [pc, #12]	@ (80010d0 <display7SEG_YELLOW_RED+0x64>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	601a      	str	r2, [r3, #0]
				break;
 80010c8:	bf00      	nop
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000058 	.word	0x20000058
 80010d4:	2000009c 	.word	0x2000009c

080010d8 <display7SEG_GREEN_RED>:

void display7SEG_GREEN_RED(){
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	switch(num_EN){
 80010dc:	4b17      	ldr	r3, [pc, #92]	@ (800113c <display7SEG_GREEN_RED+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d002      	beq.n	80010ea <display7SEG_GREEN_RED+0x12>
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d00e      	beq.n	8001106 <display7SEG_GREEN_RED+0x2e>
					Led_buffer[1]--;
					Led_buffer[3]--;
					num_EN =1;
				break;
}
}
 80010e8:	e025      	b.n	8001136 <display7SEG_GREEN_RED+0x5e>
				display7SEG1(Led_buffer[2]);
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <display7SEG_GREEN_RED+0x68>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fe2e 	bl	8000d50 <display7SEG1>
				display7SEG2(Led_buffer[0]);
 80010f4:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <display7SEG_GREEN_RED+0x68>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fc5f 	bl	80009bc <display7SEG2>
				num_EN =2;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <display7SEG_GREEN_RED+0x64>)
 8001100:	2202      	movs	r2, #2
 8001102:	601a      	str	r2, [r3, #0]
				break;
 8001104:	e017      	b.n	8001136 <display7SEG_GREEN_RED+0x5e>
				display7SEG1(Led_buffer[3]);
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <display7SEG_GREEN_RED+0x68>)
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fe20 	bl	8000d50 <display7SEG1>
				display7SEG2(Led_buffer[1]);
 8001110:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <display7SEG_GREEN_RED+0x68>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fc51 	bl	80009bc <display7SEG2>
					Led_buffer[1]--;
 800111a:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <display7SEG_GREEN_RED+0x68>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	4a07      	ldr	r2, [pc, #28]	@ (8001140 <display7SEG_GREEN_RED+0x68>)
 8001122:	6053      	str	r3, [r2, #4]
					Led_buffer[3]--;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <display7SEG_GREEN_RED+0x68>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	3b01      	subs	r3, #1
 800112a:	4a05      	ldr	r2, [pc, #20]	@ (8001140 <display7SEG_GREEN_RED+0x68>)
 800112c:	60d3      	str	r3, [r2, #12]
					num_EN =1;
 800112e:	4b03      	ldr	r3, [pc, #12]	@ (800113c <display7SEG_GREEN_RED+0x64>)
 8001130:	2201      	movs	r2, #1
 8001132:	601a      	str	r2, [r3, #0]
				break;
 8001134:	bf00      	nop
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000058 	.word	0x20000058
 8001140:	2000009c 	.word	0x2000009c

08001144 <display7SEG_RED_YELLOW>:

void display7SEG_RED_YELLOW(){
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	switch(num_EN){
 8001148:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <display7SEG_RED_YELLOW+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d002      	beq.n	8001156 <display7SEG_RED_YELLOW+0x12>
 8001150:	2b02      	cmp	r3, #2
 8001152:	d00e      	beq.n	8001172 <display7SEG_RED_YELLOW+0x2e>
					Led_buffer[1]--;
					Led_buffer[5]--;
					num_EN =1;
				break;
}
}
 8001154:	e025      	b.n	80011a2 <display7SEG_RED_YELLOW+0x5e>
				display7SEG1(Led_buffer[0]);
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <display7SEG_RED_YELLOW+0x68>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fdf8 	bl	8000d50 <display7SEG1>
				display7SEG2(Led_buffer[4]);
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <display7SEG_RED_YELLOW+0x68>)
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fc29 	bl	80009bc <display7SEG2>
					num_EN =2;
 800116a:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <display7SEG_RED_YELLOW+0x64>)
 800116c:	2202      	movs	r2, #2
 800116e:	601a      	str	r2, [r3, #0]
				break;
 8001170:	e017      	b.n	80011a2 <display7SEG_RED_YELLOW+0x5e>
				display7SEG1(Led_buffer[1]);
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <display7SEG_RED_YELLOW+0x68>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fdea 	bl	8000d50 <display7SEG1>
				display7SEG2(Led_buffer[5]);
 800117c:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <display7SEG_RED_YELLOW+0x68>)
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fc1b 	bl	80009bc <display7SEG2>
					Led_buffer[1]--;
 8001186:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <display7SEG_RED_YELLOW+0x68>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	4a07      	ldr	r2, [pc, #28]	@ (80011ac <display7SEG_RED_YELLOW+0x68>)
 800118e:	6053      	str	r3, [r2, #4]
					Led_buffer[5]--;
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <display7SEG_RED_YELLOW+0x68>)
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	3b01      	subs	r3, #1
 8001196:	4a05      	ldr	r2, [pc, #20]	@ (80011ac <display7SEG_RED_YELLOW+0x68>)
 8001198:	6153      	str	r3, [r2, #20]
					num_EN =1;
 800119a:	4b03      	ldr	r3, [pc, #12]	@ (80011a8 <display7SEG_RED_YELLOW+0x64>)
 800119c:	2201      	movs	r2, #1
 800119e:	601a      	str	r2, [r3, #0]
				break;
 80011a0:	bf00      	nop
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000058 	.word	0x20000058
 80011ac:	2000009c 	.word	0x2000009c

080011b0 <display7SEG_RED_GREEN>:

void display7SEG_RED_GREEN(){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	switch(num_EN){
 80011b4:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <display7SEG_RED_GREEN+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d002      	beq.n	80011c2 <display7SEG_RED_GREEN+0x12>
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d00e      	beq.n	80011de <display7SEG_RED_GREEN+0x2e>
					Led_buffer[1]--;
					Led_buffer[3]--;
					num_EN =1;
				break;
}
}
 80011c0:	e025      	b.n	800120e <display7SEG_RED_GREEN+0x5e>
				display7SEG1(Led_buffer[0]);
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <display7SEG_RED_GREEN+0x68>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fdc2 	bl	8000d50 <display7SEG1>
				display7SEG2(Led_buffer[2]);
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <display7SEG_RED_GREEN+0x68>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fbf3 	bl	80009bc <display7SEG2>
					num_EN =2;
 80011d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <display7SEG_RED_GREEN+0x64>)
 80011d8:	2202      	movs	r2, #2
 80011da:	601a      	str	r2, [r3, #0]
				break;
 80011dc:	e017      	b.n	800120e <display7SEG_RED_GREEN+0x5e>
				display7SEG1(Led_buffer[1]);
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <display7SEG_RED_GREEN+0x68>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fdb4 	bl	8000d50 <display7SEG1>
				display7SEG2(Led_buffer[3]);
 80011e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <display7SEG_RED_GREEN+0x68>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fbe5 	bl	80009bc <display7SEG2>
					Led_buffer[1]--;
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <display7SEG_RED_GREEN+0x68>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	4a07      	ldr	r2, [pc, #28]	@ (8001218 <display7SEG_RED_GREEN+0x68>)
 80011fa:	6053      	str	r3, [r2, #4]
					Led_buffer[3]--;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <display7SEG_RED_GREEN+0x68>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	3b01      	subs	r3, #1
 8001202:	4a05      	ldr	r2, [pc, #20]	@ (8001218 <display7SEG_RED_GREEN+0x68>)
 8001204:	60d3      	str	r3, [r2, #12]
					num_EN =1;
 8001206:	4b03      	ldr	r3, [pc, #12]	@ (8001214 <display7SEG_RED_GREEN+0x64>)
 8001208:	2201      	movs	r2, #1
 800120a:	601a      	str	r2, [r3, #0]
				break;
 800120c:	bf00      	nop
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000058 	.word	0x20000058
 8001218:	2000009c 	.word	0x2000009c

0800121c <check_time>:

void check_time(){
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
	if(Led_buffer[1] < 0 && Led_buffer[0] >0){
 8001220:	4b4b      	ldr	r3, [pc, #300]	@ (8001350 <check_time+0x134>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	da0b      	bge.n	8001240 <check_time+0x24>
 8001228:	4b49      	ldr	r3, [pc, #292]	@ (8001350 <check_time+0x134>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	dd07      	ble.n	8001240 <check_time+0x24>
				Led_buffer[1]=9;
 8001230:	4b47      	ldr	r3, [pc, #284]	@ (8001350 <check_time+0x134>)
 8001232:	2209      	movs	r2, #9
 8001234:	605a      	str	r2, [r3, #4]
				Led_buffer[0]--;
 8001236:	4b46      	ldr	r3, [pc, #280]	@ (8001350 <check_time+0x134>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3b01      	subs	r3, #1
 800123c:	4a44      	ldr	r2, [pc, #272]	@ (8001350 <check_time+0x134>)
 800123e:	6013      	str	r3, [r2, #0]
	}
	if(Led_buffer[0] == 0 && Led_buffer[1]==0){
 8001240:	4b43      	ldr	r3, [pc, #268]	@ (8001350 <check_time+0x134>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d11c      	bne.n	8001282 <check_time+0x66>
 8001248:	4b41      	ldr	r3, [pc, #260]	@ (8001350 <check_time+0x134>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d118      	bne.n	8001282 <check_time+0x66>
		Led_buffer[0] = RED_TIME/10;
 8001250:	4b40      	ldr	r3, [pc, #256]	@ (8001354 <check_time+0x138>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a40      	ldr	r2, [pc, #256]	@ (8001358 <check_time+0x13c>)
 8001256:	fb82 1203 	smull	r1, r2, r2, r3
 800125a:	1092      	asrs	r2, r2, #2
 800125c:	17db      	asrs	r3, r3, #31
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	4a3b      	ldr	r2, [pc, #236]	@ (8001350 <check_time+0x134>)
 8001262:	6013      	str	r3, [r2, #0]
		Led_buffer[1] = RED_TIME%10;
 8001264:	4b3b      	ldr	r3, [pc, #236]	@ (8001354 <check_time+0x138>)
 8001266:	6819      	ldr	r1, [r3, #0]
 8001268:	4b3b      	ldr	r3, [pc, #236]	@ (8001358 <check_time+0x13c>)
 800126a:	fb83 2301 	smull	r2, r3, r3, r1
 800126e:	109a      	asrs	r2, r3, #2
 8001270:	17cb      	asrs	r3, r1, #31
 8001272:	1ad2      	subs	r2, r2, r3
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	1aca      	subs	r2, r1, r3
 800127e:	4b34      	ldr	r3, [pc, #208]	@ (8001350 <check_time+0x134>)
 8001280:	605a      	str	r2, [r3, #4]
	}
	if(Led_buffer[3] < 0 && Led_buffer[2] >0){
 8001282:	4b33      	ldr	r3, [pc, #204]	@ (8001350 <check_time+0x134>)
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	da0b      	bge.n	80012a2 <check_time+0x86>
 800128a:	4b31      	ldr	r3, [pc, #196]	@ (8001350 <check_time+0x134>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	dd07      	ble.n	80012a2 <check_time+0x86>
				Led_buffer[3]=9;
 8001292:	4b2f      	ldr	r3, [pc, #188]	@ (8001350 <check_time+0x134>)
 8001294:	2209      	movs	r2, #9
 8001296:	60da      	str	r2, [r3, #12]
				Led_buffer[2]--;
 8001298:	4b2d      	ldr	r3, [pc, #180]	@ (8001350 <check_time+0x134>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	3b01      	subs	r3, #1
 800129e:	4a2c      	ldr	r2, [pc, #176]	@ (8001350 <check_time+0x134>)
 80012a0:	6093      	str	r3, [r2, #8]
	}
	if(Led_buffer[2] == 0 && Led_buffer[3]==0){
 80012a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001350 <check_time+0x134>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d11c      	bne.n	80012e4 <check_time+0xc8>
 80012aa:	4b29      	ldr	r3, [pc, #164]	@ (8001350 <check_time+0x134>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d118      	bne.n	80012e4 <check_time+0xc8>
		Led_buffer[2] = GREEN_TIME/10;
 80012b2:	4b2a      	ldr	r3, [pc, #168]	@ (800135c <check_time+0x140>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a28      	ldr	r2, [pc, #160]	@ (8001358 <check_time+0x13c>)
 80012b8:	fb82 1203 	smull	r1, r2, r2, r3
 80012bc:	1092      	asrs	r2, r2, #2
 80012be:	17db      	asrs	r3, r3, #31
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	4a23      	ldr	r2, [pc, #140]	@ (8001350 <check_time+0x134>)
 80012c4:	6093      	str	r3, [r2, #8]
		Led_buffer[3] = GREEN_TIME%10;
 80012c6:	4b25      	ldr	r3, [pc, #148]	@ (800135c <check_time+0x140>)
 80012c8:	6819      	ldr	r1, [r3, #0]
 80012ca:	4b23      	ldr	r3, [pc, #140]	@ (8001358 <check_time+0x13c>)
 80012cc:	fb83 2301 	smull	r2, r3, r3, r1
 80012d0:	109a      	asrs	r2, r3, #2
 80012d2:	17cb      	asrs	r3, r1, #31
 80012d4:	1ad2      	subs	r2, r2, r3
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	1aca      	subs	r2, r1, r3
 80012e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001350 <check_time+0x134>)
 80012e2:	60da      	str	r2, [r3, #12]
	}
	if(Led_buffer[5] < 0 && Led_buffer[4] >0){
 80012e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <check_time+0x134>)
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	da0b      	bge.n	8001304 <check_time+0xe8>
 80012ec:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <check_time+0x134>)
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	dd07      	ble.n	8001304 <check_time+0xe8>
				Led_buffer[5]=9;
 80012f4:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <check_time+0x134>)
 80012f6:	2209      	movs	r2, #9
 80012f8:	615a      	str	r2, [r3, #20]
				Led_buffer[4]--;
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <check_time+0x134>)
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	3b01      	subs	r3, #1
 8001300:	4a13      	ldr	r2, [pc, #76]	@ (8001350 <check_time+0x134>)
 8001302:	6113      	str	r3, [r2, #16]
	}
	if(Led_buffer[4] == 0 && Led_buffer[5]==0){
 8001304:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <check_time+0x134>)
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d11c      	bne.n	8001346 <check_time+0x12a>
 800130c:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <check_time+0x134>)
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d118      	bne.n	8001346 <check_time+0x12a>
		Led_buffer[4] = YELLOW_TIME/10;
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <check_time+0x144>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0f      	ldr	r2, [pc, #60]	@ (8001358 <check_time+0x13c>)
 800131a:	fb82 1203 	smull	r1, r2, r2, r3
 800131e:	1092      	asrs	r2, r2, #2
 8001320:	17db      	asrs	r3, r3, #31
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <check_time+0x134>)
 8001326:	6113      	str	r3, [r2, #16]
		Led_buffer[5] = YELLOW_TIME%10;
 8001328:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <check_time+0x144>)
 800132a:	6819      	ldr	r1, [r3, #0]
 800132c:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <check_time+0x13c>)
 800132e:	fb83 2301 	smull	r2, r3, r3, r1
 8001332:	109a      	asrs	r2, r3, #2
 8001334:	17cb      	asrs	r3, r1, #31
 8001336:	1ad2      	subs	r2, r2, r3
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	1aca      	subs	r2, r1, r3
 8001342:	4b03      	ldr	r3, [pc, #12]	@ (8001350 <check_time+0x134>)
 8001344:	615a      	str	r2, [r3, #20]
	}
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	2000009c 	.word	0x2000009c
 8001354:	20000048 	.word	0x20000048
 8001358:	66666667 	.word	0x66666667
 800135c:	2000004c 	.word	0x2000004c
 8001360:	20000050 	.word	0x20000050

08001364 <display7SEG_TFL>:

void display7SEG_TFL(){
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	switch(status){
 8001368:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <display7SEG_TFL+0x48>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b04      	cmp	r3, #4
 800136e:	d819      	bhi.n	80013a4 <display7SEG_TFL+0x40>
 8001370:	a201      	add	r2, pc, #4	@ (adr r2, 8001378 <display7SEG_TFL+0x14>)
 8001372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001376:	bf00      	nop
 8001378:	080013a5 	.word	0x080013a5
 800137c:	0800138d 	.word	0x0800138d
 8001380:	08001393 	.word	0x08001393
 8001384:	08001399 	.word	0x08001399
 8001388:	0800139f 	.word	0x0800139f
	case NO_LED:
		break;
	case RED_GREEN:
		display7SEG_RED_GREEN();
 800138c:	f7ff ff10 	bl	80011b0 <display7SEG_RED_GREEN>
		break;
 8001390:	e009      	b.n	80013a6 <display7SEG_TFL+0x42>
	case RED_YELLOW:
		display7SEG_RED_YELLOW();
 8001392:	f7ff fed7 	bl	8001144 <display7SEG_RED_YELLOW>
		break;
 8001396:	e006      	b.n	80013a6 <display7SEG_TFL+0x42>
	case GREEN_RED:
		display7SEG_GREEN_RED();
 8001398:	f7ff fe9e 	bl	80010d8 <display7SEG_GREEN_RED>
		break;
 800139c:	e003      	b.n	80013a6 <display7SEG_TFL+0x42>
	case YELLOW_RED:
		display7SEG_YELLOW_RED();
 800139e:	f7ff fe65 	bl	800106c <display7SEG_YELLOW_RED>
		break;
 80013a2:	e000      	b.n	80013a6 <display7SEG_TFL+0x42>
	default:
		break;
 80013a4:	bf00      	nop
	}


}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000098 	.word	0x20000098

080013b0 <Toggle_LED>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Toggle_LED(void){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED_RED);
 80013b4:	2120      	movs	r1, #32
 80013b6:	4802      	ldr	r0, [pc, #8]	@ (80013c0 <Toggle_LED+0x10>)
 80013b8:	f000 fedb 	bl	8002172 <HAL_GPIO_TogglePin>
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40010800 	.word	0x40010800

080013c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c8:	f000 fbb8 	bl	8001b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013cc:	f000 f838 	bl	8001440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80013d0:	f000 f872 	bl	80014b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 80013d4:	4813      	ldr	r0, [pc, #76]	@ (8001424 <main+0x60>)
 80013d6:	f001 fb13 	bl	8002a00 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Lab4_Init();
 80013da:	f7ff fa4f 	bl	800087c <Lab4_Init>
  SCH_Init() ;
 80013de:	f000 f8c9 	bl	8001574 <SCH_Init>

  SCH_ADD_TASK(Toggle_LED , 200, 100);
 80013e2:	2264      	movs	r2, #100	@ 0x64
 80013e4:	21c8      	movs	r1, #200	@ 0xc8
 80013e6:	4810      	ldr	r0, [pc, #64]	@ (8001428 <main+0x64>)
 80013e8:	f000 f94a 	bl	8001680 <SCH_ADD_TASK>

  SCH_ADD_TASK(fsm_automatic , 0, 100);
 80013ec:	2264      	movs	r2, #100	@ 0x64
 80013ee:	2100      	movs	r1, #0
 80013f0:	480e      	ldr	r0, [pc, #56]	@ (800142c <main+0x68>)
 80013f2:	f000 f945 	bl	8001680 <SCH_ADD_TASK>
  SCH_ADD_TASK(display7SEG_TFL, 0, 50);
 80013f6:	2232      	movs	r2, #50	@ 0x32
 80013f8:	2100      	movs	r1, #0
 80013fa:	480d      	ldr	r0, [pc, #52]	@ (8001430 <main+0x6c>)
 80013fc:	f000 f940 	bl	8001680 <SCH_ADD_TASK>

  SCH_ADD_TASK(setEN, 0, 50);
 8001400:	2232      	movs	r2, #50	@ 0x32
 8001402:	2100      	movs	r1, #0
 8001404:	480b      	ldr	r0, [pc, #44]	@ (8001434 <main+0x70>)
 8001406:	f000 f93b 	bl	8001680 <SCH_ADD_TASK>
  SCH_ADD_TASK(fsm_manual, 0, 50);
 800140a:	2232      	movs	r2, #50	@ 0x32
 800140c:	2100      	movs	r1, #0
 800140e:	480a      	ldr	r0, [pc, #40]	@ (8001438 <main+0x74>)
 8001410:	f000 f936 	bl	8001680 <SCH_ADD_TASK>

  SCH_ADD_TASK(check_time, 0, 50);
 8001414:	2232      	movs	r2, #50	@ 0x32
 8001416:	2100      	movs	r1, #0
 8001418:	4808      	ldr	r0, [pc, #32]	@ (800143c <main+0x78>)
 800141a:	f000 f931 	bl	8001680 <SCH_ADD_TASK>
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 800141e:	f000 f981 	bl	8001724 <SCH_Dispatch_Tasks>
 8001422:	e7fc      	b.n	800141e <main+0x5a>
 8001424:	200000c0 	.word	0x200000c0
 8001428:	080013b1 	.word	0x080013b1
 800142c:	0800014d 	.word	0x0800014d
 8001430:	08001365 	.word	0x08001365
 8001434:	0800092d 	.word	0x0800092d
 8001438:	0800045d 	.word	0x0800045d
 800143c:	0800121d 	.word	0x0800121d

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b090      	sub	sp, #64	@ 0x40
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 0318 	add.w	r3, r7, #24
 800144a:	2228      	movs	r2, #40	@ 0x28
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f001 fe62 	bl	8003118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001462:	2302      	movs	r3, #2
 8001464:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001466:	2301      	movs	r3, #1
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800146a:	2310      	movs	r3, #16
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800146e:	2300      	movs	r3, #0
 8001470:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001472:	f107 0318 	add.w	r3, r7, #24
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fe94 	bl	80021a4 <HAL_RCC_OscConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001482:	f000 f871 	bl	8001568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001486:	230f      	movs	r3, #15
 8001488:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f001 f902 	bl	80026a8 <HAL_RCC_ClockConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014aa:	f000 f85d 	bl	8001568 <Error_Handler>
  }
}
 80014ae:	bf00      	nop
 80014b0:	3740      	adds	r7, #64	@ 0x40
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	463b      	mov	r3, r7
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	@ (800154c <MX_TIM2_Init+0x94>)
 80014d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <MX_TIM2_Init+0x94>)
 80014de:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80014e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b19      	ldr	r3, [pc, #100]	@ (800154c <MX_TIM2_Init+0x94>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80014ea:	4b18      	ldr	r3, [pc, #96]	@ (800154c <MX_TIM2_Init+0x94>)
 80014ec:	2209      	movs	r2, #9
 80014ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f0:	4b16      	ldr	r3, [pc, #88]	@ (800154c <MX_TIM2_Init+0x94>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <MX_TIM2_Init+0x94>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014fc:	4813      	ldr	r0, [pc, #76]	@ (800154c <MX_TIM2_Init+0x94>)
 80014fe:	f001 fa2f 	bl	8002960 <HAL_TIM_Base_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001508:	f000 f82e 	bl	8001568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001510:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	4619      	mov	r1, r3
 8001518:	480c      	ldr	r0, [pc, #48]	@ (800154c <MX_TIM2_Init+0x94>)
 800151a:	f001 fbad 	bl	8002c78 <HAL_TIM_ConfigClockSource>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001524:	f000 f820 	bl	8001568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001530:	463b      	mov	r3, r7
 8001532:	4619      	mov	r1, r3
 8001534:	4805      	ldr	r0, [pc, #20]	@ (800154c <MX_TIM2_Init+0x94>)
 8001536:	f001 fd85 	bl	8003044 <HAL_TIMEx_MasterConfigSynchronization>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001540:	f000 f812 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001544:	bf00      	nop
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200000c0 	.word	0x200000c0

08001550 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001558:	f000 f824 	bl	80015a4 <SCH_Update>
	getKeyInput();
 800155c:	f7fe fea2 	bl	80002a4 <getKeyInput>
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156c:	b672      	cpsid	i
}
 800156e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <Error_Handler+0x8>

08001574 <SCH_Init>:

sTask SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task =0;
//char Error_code_G;

void SCH_Init(void){
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
	 uint8_t i ;
	 for (i = 0; i <SCH_MAX_TASKS; i++) {
 800157a:	2300      	movs	r3, #0
 800157c:	71fb      	strb	r3, [r7, #7]
 800157e:	e006      	b.n	800158e <SCH_Init+0x1a>
	 SCH_Delete_Task(i);
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f91c 	bl	80017c0 <SCH_Delete_Task>
	 for (i = 0; i <SCH_MAX_TASKS; i++) {
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	3301      	adds	r3, #1
 800158c:	71fb      	strb	r3, [r7, #7]
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	2b27      	cmp	r3, #39	@ 0x27
 8001592:	d9f5      	bls.n	8001580 <SCH_Init+0xc>
	 }
//	 Error_code_G = 0;
	 Timer_init();
 8001594:	f000 f952 	bl	800183c <Timer_init>
	 Watchdog_init();
 8001598:	f000 f956 	bl	8001848 <Watchdog_init>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <SCH_Update>:
void SCH_Update(void){
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0

	 uint8_t Index;

	 for (Index = 0; Index <SCH_MAX_TASKS; Index++) {
 80015aa:	2300      	movs	r3, #0
 80015ac:	71fb      	strb	r3, [r7, #7]
 80015ae:	e05c      	b.n	800166a <SCH_Update+0xc6>
		 if (SCH_tasks_G[Index].pTask){
 80015b0:	79fa      	ldrb	r2, [r7, #7]
 80015b2:	4932      	ldr	r1, [pc, #200]	@ (800167c <SCH_Update+0xd8>)
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d04f      	beq.n	8001664 <SCH_Update+0xc0>
			 if (SCH_tasks_G[Index].Delay == 0) {
 80015c4:	79fa      	ldrb	r2, [r7, #7]
 80015c6:	492d      	ldr	r1, [pc, #180]	@ (800167c <SCH_Update+0xd8>)
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	3304      	adds	r3, #4
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d132      	bne.n	8001640 <SCH_Update+0x9c>
				 SCH_tasks_G[Index].RunMe+= 1;
 80015da:	79fa      	ldrb	r2, [r7, #7]
 80015dc:	4927      	ldr	r1, [pc, #156]	@ (800167c <SCH_Update+0xd8>)
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	330c      	adds	r3, #12
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	79fa      	ldrb	r2, [r7, #7]
 80015ee:	3301      	adds	r3, #1
 80015f0:	b2d8      	uxtb	r0, r3
 80015f2:	4922      	ldr	r1, [pc, #136]	@ (800167c <SCH_Update+0xd8>)
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	330c      	adds	r3, #12
 8001600:	4602      	mov	r2, r0
 8001602:	701a      	strb	r2, [r3, #0]
				 if (SCH_tasks_G[Index].Period) {
 8001604:	79fa      	ldrb	r2, [r7, #7]
 8001606:	491d      	ldr	r1, [pc, #116]	@ (800167c <SCH_Update+0xd8>)
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	3308      	adds	r3, #8
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d024      	beq.n	8001664 <SCH_Update+0xc0>
				 SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 800161a:	79f9      	ldrb	r1, [r7, #7]
 800161c:	79fa      	ldrb	r2, [r7, #7]
 800161e:	4817      	ldr	r0, [pc, #92]	@ (800167c <SCH_Update+0xd8>)
 8001620:	460b      	mov	r3, r1
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4403      	add	r3, r0
 800162a:	3308      	adds	r3, #8
 800162c:	6819      	ldr	r1, [r3, #0]
 800162e:	4813      	ldr	r0, [pc, #76]	@ (800167c <SCH_Update+0xd8>)
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4403      	add	r3, r0
 800163a:	3304      	adds	r3, #4
 800163c:	6019      	str	r1, [r3, #0]
 800163e:	e011      	b.n	8001664 <SCH_Update+0xc0>
				 }
			 } else {

			 SCH_tasks_G[Index].Delay --;
 8001640:	79fa      	ldrb	r2, [r7, #7]
 8001642:	490e      	ldr	r1, [pc, #56]	@ (800167c <SCH_Update+0xd8>)
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	3304      	adds	r3, #4
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	1e59      	subs	r1, r3, #1
 8001654:	4809      	ldr	r0, [pc, #36]	@ (800167c <SCH_Update+0xd8>)
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4403      	add	r3, r0
 8001660:	3304      	adds	r3, #4
 8001662:	6019      	str	r1, [r3, #0]
	 for (Index = 0; Index <SCH_MAX_TASKS; Index++) {
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	3301      	adds	r3, #1
 8001668:	71fb      	strb	r3, [r7, #7]
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	2b27      	cmp	r3, #39	@ 0x27
 800166e:	d99f      	bls.n	80015b0 <SCH_Update+0xc>
			 }
		 }
	 }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	20000108 	.word	0x20000108

08001680 <SCH_ADD_TASK>:

void SCH_ADD_TASK(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8001680:	b480      	push	{r7}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	 uint8_t Index = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	75fb      	strb	r3, [r7, #23]
	 while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8001690:	e002      	b.n	8001698 <SCH_ADD_TASK+0x18>
	 {
	 Index++;
 8001692:	7dfb      	ldrb	r3, [r7, #23]
 8001694:	3301      	adds	r3, #1
 8001696:	75fb      	strb	r3, [r7, #23]
	 while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8001698:	7dfa      	ldrb	r2, [r7, #23]
 800169a:	4921      	ldr	r1, [pc, #132]	@ (8001720 <SCH_ADD_TASK+0xa0>)
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <SCH_ADD_TASK+0x32>
 80016ac:	7dfb      	ldrb	r3, [r7, #23]
 80016ae:	2b27      	cmp	r3, #39	@ 0x27
 80016b0:	d9ef      	bls.n	8001692 <SCH_ADD_TASK+0x12>
//	 if (Index == SCH_MAX_TASKS)
//	 {
////	  Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
//	  return SCH_MAX_TASKS;
//	 }
	  SCH_tasks_G[Index].pTask = pFunction;
 80016b2:	7dfa      	ldrb	r2, [r7, #23]
 80016b4:	491a      	ldr	r1, [pc, #104]	@ (8001720 <SCH_ADD_TASK+0xa0>)
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	601a      	str	r2, [r3, #0]
	  SCH_tasks_G[Index].Delay =DELAY;
 80016c4:	7dfa      	ldrb	r2, [r7, #23]
 80016c6:	4916      	ldr	r1, [pc, #88]	@ (8001720 <SCH_ADD_TASK+0xa0>)
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	3304      	adds	r3, #4
 80016d4:	68ba      	ldr	r2, [r7, #8]
 80016d6:	601a      	str	r2, [r3, #0]
	  SCH_tasks_G[Index].Period =PERIOD;
 80016d8:	7dfa      	ldrb	r2, [r7, #23]
 80016da:	4911      	ldr	r1, [pc, #68]	@ (8001720 <SCH_ADD_TASK+0xa0>)
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	3308      	adds	r3, #8
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	601a      	str	r2, [r3, #0]
	  SCH_tasks_G[Index].RunMe= 0;
 80016ec:	7dfa      	ldrb	r2, [r7, #23]
 80016ee:	490c      	ldr	r1, [pc, #48]	@ (8001720 <SCH_ADD_TASK+0xa0>)
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	330c      	adds	r3, #12
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]

	  SCH_tasks_G[Index].TaskID = Index;
 8001700:	7dfa      	ldrb	r2, [r7, #23]
 8001702:	7df9      	ldrb	r1, [r7, #23]
 8001704:	4806      	ldr	r0, [pc, #24]	@ (8001720 <SCH_ADD_TASK+0xa0>)
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4403      	add	r3, r0
 8001710:	3310      	adds	r3, #16
 8001712:	6019      	str	r1, [r3, #0]
}
 8001714:	bf00      	nop
 8001716:	371c      	adds	r7, #28
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000108 	.word	0x20000108

08001724 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
	uint8_t Index;
	for (Index = 0; Index <SCH_MAX_TASKS; Index++){
 800172a:	2300      	movs	r3, #0
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	e039      	b.n	80017a4 <SCH_Dispatch_Tasks+0x80>
		if (SCH_tasks_G[Index].RunMe> 0) {
 8001730:	79fa      	ldrb	r2, [r7, #7]
 8001732:	4922      	ldr	r1, [pc, #136]	@ (80017bc <SCH_Dispatch_Tasks+0x98>)
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	330c      	adds	r3, #12
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d02b      	beq.n	800179e <SCH_Dispatch_Tasks+0x7a>
			(*SCH_tasks_G[Index].pTask)();
 8001746:	79fa      	ldrb	r2, [r7, #7]
 8001748:	491c      	ldr	r1, [pc, #112]	@ (80017bc <SCH_Dispatch_Tasks+0x98>)
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe --;
 8001758:	79fa      	ldrb	r2, [r7, #7]
 800175a:	4918      	ldr	r1, [pc, #96]	@ (80017bc <SCH_Dispatch_Tasks+0x98>)
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	330c      	adds	r3, #12
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	3b01      	subs	r3, #1
 800176c:	b2d8      	uxtb	r0, r3
 800176e:	4913      	ldr	r1, [pc, #76]	@ (80017bc <SCH_Dispatch_Tasks+0x98>)
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	330c      	adds	r3, #12
 800177c:	4602      	mov	r2, r0
 800177e:	701a      	strb	r2, [r3, #0]
			if (SCH_tasks_G[Index].Period == 0)
 8001780:	79fa      	ldrb	r2, [r7, #7]
 8001782:	490e      	ldr	r1, [pc, #56]	@ (80017bc <SCH_Dispatch_Tasks+0x98>)
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	3308      	adds	r3, #8
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d103      	bne.n	800179e <SCH_Dispatch_Tasks+0x7a>
			{
			SCH_Delete_Task(Index);
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	4618      	mov	r0, r3
 800179a:	f000 f811 	bl	80017c0 <SCH_Delete_Task>
	for (Index = 0; Index <SCH_MAX_TASKS; Index++){
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	3301      	adds	r3, #1
 80017a2:	71fb      	strb	r3, [r7, #7]
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	2b27      	cmp	r3, #39	@ 0x27
 80017a8:	d9c2      	bls.n	8001730 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}

	SCH_Report_Status();
 80017aa:	f000 f83b 	bl	8001824 <SCH_Report_Status>

	SCH_Go_To_Sleep();
 80017ae:	f000 f83f 	bl	8001830 <SCH_Go_To_Sleep>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000108 	.word	0x20000108

080017c0 <SCH_Delete_Task>:

void SCH_Delete_Task (uint32_t TASK_INDEX){
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
//		 Return_code = RETURN_ERROR;
//	 } else {
//		 Return_code = RETURN_NORMAL;
//	 }

	 SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 80017c8:	4915      	ldr	r1, [pc, #84]	@ (8001820 <SCH_Delete_Task+0x60>)
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX]. Delay = 0;
 80017da:	4911      	ldr	r1, [pc, #68]	@ (8001820 <SCH_Delete_Task+0x60>)
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	3304      	adds	r3, #4
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX]. Period = 0;
 80017ee:	490c      	ldr	r1, [pc, #48]	@ (8001820 <SCH_Delete_Task+0x60>)
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	3308      	adds	r3, #8
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX].RunMe = 0;
 8001802:	4907      	ldr	r1, [pc, #28]	@ (8001820 <SCH_Delete_Task+0x60>)
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	330c      	adds	r3, #12
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
//	 return Return_code; // return status
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	20000108 	.word	0x20000108

08001824 <SCH_Report_Status>:
void SCH_Report_Status(void){
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <SCH_Go_To_Sleep>:

void SCH_Go_To_Sleep(void){
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <Timer_init>:

void Timer_init(void){
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <Watchdog_init>:
void Watchdog_init(void){
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <HAL_MspInit+0x5c>)
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	4a14      	ldr	r2, [pc, #80]	@ (80018b0 <HAL_MspInit+0x5c>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6193      	str	r3, [r2, #24]
 8001866:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <HAL_MspInit+0x5c>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <HAL_MspInit+0x5c>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	4a0e      	ldr	r2, [pc, #56]	@ (80018b0 <HAL_MspInit+0x5c>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800187c:	61d3      	str	r3, [r2, #28]
 800187e:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <HAL_MspInit+0x5c>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800188a:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <HAL_MspInit+0x60>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	4a04      	ldr	r2, [pc, #16]	@ (80018b4 <HAL_MspInit+0x60>)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010000 	.word	0x40010000

080018b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018c8:	d113      	bne.n	80018f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ca:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <HAL_TIM_Base_MspInit+0x44>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	4a0b      	ldr	r2, [pc, #44]	@ (80018fc <HAL_TIM_Base_MspInit+0x44>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	61d3      	str	r3, [r2, #28]
 80018d6:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <HAL_TIM_Base_MspInit+0x44>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2100      	movs	r1, #0
 80018e6:	201c      	movs	r0, #28
 80018e8:	f000 fa61 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018ec:	201c      	movs	r0, #28
 80018ee:	f000 fa7a 	bl	8001de6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000

08001900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <NMI_Handler+0x4>

08001908 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <HardFault_Handler+0x4>

08001910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <MemManage_Handler+0x4>

08001918 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <BusFault_Handler+0x4>

08001920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <UsageFault_Handler+0x4>

08001928 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001950:	f000 f93a 	bl	8001bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}

08001958 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800195c:	4802      	ldr	r0, [pc, #8]	@ (8001968 <TIM2_IRQHandler+0x10>)
 800195e:	f001 f89b 	bl	8002a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200000c0 	.word	0x200000c0

0800196c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <displayTFL>:

#include "global.h"



void displayTFL(){
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	switch (status){
 800197c:	4b5a      	ldr	r3, [pc, #360]	@ (8001ae8 <displayTFL+0x170>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b04      	cmp	r3, #4
 8001982:	f200 80ad 	bhi.w	8001ae0 <displayTFL+0x168>
 8001986:	a201      	add	r2, pc, #4	@ (adr r2, 800198c <displayTFL+0x14>)
 8001988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198c:	080019a1 	.word	0x080019a1
 8001990:	080019e1 	.word	0x080019e1
 8001994:	08001a21 	.word	0x08001a21
 8001998:	08001a61 	.word	0x08001a61
 800199c:	08001aa1 	.word	0x08001aa1
	case NO_LED:
		HAL_GPIO_WritePin(GPIOA, LED_RED1, RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2104      	movs	r1, #4
 80019a4:	4851      	ldr	r0, [pc, #324]	@ (8001aec <displayTFL+0x174>)
 80019a6:	f000 fbcc 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN1, RESET);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2108      	movs	r1, #8
 80019ae:	484f      	ldr	r0, [pc, #316]	@ (8001aec <displayTFL+0x174>)
 80019b0:	f000 fbc7 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW1, RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2110      	movs	r1, #16
 80019b8:	484c      	ldr	r0, [pc, #304]	@ (8001aec <displayTFL+0x174>)
 80019ba:	f000 fbc2 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED2, RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	2140      	movs	r1, #64	@ 0x40
 80019c2:	484a      	ldr	r0, [pc, #296]	@ (8001aec <displayTFL+0x174>)
 80019c4:	f000 fbbd 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN2, RESET);
 80019c8:	2200      	movs	r2, #0
 80019ca:	2180      	movs	r1, #128	@ 0x80
 80019cc:	4847      	ldr	r0, [pc, #284]	@ (8001aec <displayTFL+0x174>)
 80019ce:	f000 fbb8 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW2, RESET);
 80019d2:	2200      	movs	r2, #0
 80019d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019d8:	4844      	ldr	r0, [pc, #272]	@ (8001aec <displayTFL+0x174>)
 80019da:	f000 fbb2 	bl	8002142 <HAL_GPIO_WritePin>
		break;
 80019de:	e080      	b.n	8001ae2 <displayTFL+0x16a>
	case RED_GREEN:
		HAL_GPIO_WritePin(GPIOA, LED_RED1, SET);
 80019e0:	2201      	movs	r2, #1
 80019e2:	2104      	movs	r1, #4
 80019e4:	4841      	ldr	r0, [pc, #260]	@ (8001aec <displayTFL+0x174>)
 80019e6:	f000 fbac 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN1, RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2108      	movs	r1, #8
 80019ee:	483f      	ldr	r0, [pc, #252]	@ (8001aec <displayTFL+0x174>)
 80019f0:	f000 fba7 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW1, RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2110      	movs	r1, #16
 80019f8:	483c      	ldr	r0, [pc, #240]	@ (8001aec <displayTFL+0x174>)
 80019fa:	f000 fba2 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED2, RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2140      	movs	r1, #64	@ 0x40
 8001a02:	483a      	ldr	r0, [pc, #232]	@ (8001aec <displayTFL+0x174>)
 8001a04:	f000 fb9d 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN2, SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	2180      	movs	r1, #128	@ 0x80
 8001a0c:	4837      	ldr	r0, [pc, #220]	@ (8001aec <displayTFL+0x174>)
 8001a0e:	f000 fb98 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW2, RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a18:	4834      	ldr	r0, [pc, #208]	@ (8001aec <displayTFL+0x174>)
 8001a1a:	f000 fb92 	bl	8002142 <HAL_GPIO_WritePin>
		break;
 8001a1e:	e060      	b.n	8001ae2 <displayTFL+0x16a>
	case RED_YELLOW:
		HAL_GPIO_WritePin(GPIOA, LED_RED1, SET);
 8001a20:	2201      	movs	r2, #1
 8001a22:	2104      	movs	r1, #4
 8001a24:	4831      	ldr	r0, [pc, #196]	@ (8001aec <displayTFL+0x174>)
 8001a26:	f000 fb8c 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN1, RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2108      	movs	r1, #8
 8001a2e:	482f      	ldr	r0, [pc, #188]	@ (8001aec <displayTFL+0x174>)
 8001a30:	f000 fb87 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW1, RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2110      	movs	r1, #16
 8001a38:	482c      	ldr	r0, [pc, #176]	@ (8001aec <displayTFL+0x174>)
 8001a3a:	f000 fb82 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED2, RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2140      	movs	r1, #64	@ 0x40
 8001a42:	482a      	ldr	r0, [pc, #168]	@ (8001aec <displayTFL+0x174>)
 8001a44:	f000 fb7d 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN2, RESET);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2180      	movs	r1, #128	@ 0x80
 8001a4c:	4827      	ldr	r0, [pc, #156]	@ (8001aec <displayTFL+0x174>)
 8001a4e:	f000 fb78 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW2, SET);
 8001a52:	2201      	movs	r2, #1
 8001a54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a58:	4824      	ldr	r0, [pc, #144]	@ (8001aec <displayTFL+0x174>)
 8001a5a:	f000 fb72 	bl	8002142 <HAL_GPIO_WritePin>
		break;
 8001a5e:	e040      	b.n	8001ae2 <displayTFL+0x16a>
	case GREEN_RED:
		HAL_GPIO_WritePin(GPIOA, LED_RED1, RESET);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2104      	movs	r1, #4
 8001a64:	4821      	ldr	r0, [pc, #132]	@ (8001aec <displayTFL+0x174>)
 8001a66:	f000 fb6c 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN1, SET);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2108      	movs	r1, #8
 8001a6e:	481f      	ldr	r0, [pc, #124]	@ (8001aec <displayTFL+0x174>)
 8001a70:	f000 fb67 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW1, RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2110      	movs	r1, #16
 8001a78:	481c      	ldr	r0, [pc, #112]	@ (8001aec <displayTFL+0x174>)
 8001a7a:	f000 fb62 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED2,  SET);
 8001a7e:	2201      	movs	r2, #1
 8001a80:	2140      	movs	r1, #64	@ 0x40
 8001a82:	481a      	ldr	r0, [pc, #104]	@ (8001aec <displayTFL+0x174>)
 8001a84:	f000 fb5d 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN2, RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2180      	movs	r1, #128	@ 0x80
 8001a8c:	4817      	ldr	r0, [pc, #92]	@ (8001aec <displayTFL+0x174>)
 8001a8e:	f000 fb58 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW2, RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a98:	4814      	ldr	r0, [pc, #80]	@ (8001aec <displayTFL+0x174>)
 8001a9a:	f000 fb52 	bl	8002142 <HAL_GPIO_WritePin>
		break;
 8001a9e:	e020      	b.n	8001ae2 <displayTFL+0x16a>
	case YELLOW_RED:
		HAL_GPIO_WritePin(GPIOA, LED_RED1, RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2104      	movs	r1, #4
 8001aa4:	4811      	ldr	r0, [pc, #68]	@ (8001aec <displayTFL+0x174>)
 8001aa6:	f000 fb4c 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN1, RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2108      	movs	r1, #8
 8001aae:	480f      	ldr	r0, [pc, #60]	@ (8001aec <displayTFL+0x174>)
 8001ab0:	f000 fb47 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW1,  SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	2110      	movs	r1, #16
 8001ab8:	480c      	ldr	r0, [pc, #48]	@ (8001aec <displayTFL+0x174>)
 8001aba:	f000 fb42 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED2,  SET);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	2140      	movs	r1, #64	@ 0x40
 8001ac2:	480a      	ldr	r0, [pc, #40]	@ (8001aec <displayTFL+0x174>)
 8001ac4:	f000 fb3d 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN2, RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2180      	movs	r1, #128	@ 0x80
 8001acc:	4807      	ldr	r0, [pc, #28]	@ (8001aec <displayTFL+0x174>)
 8001ace:	f000 fb38 	bl	8002142 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW2, RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ad8:	4804      	ldr	r0, [pc, #16]	@ (8001aec <displayTFL+0x174>)
 8001ada:	f000 fb32 	bl	8002142 <HAL_GPIO_WritePin>
		break;
 8001ade:	e000      	b.n	8001ae2 <displayTFL+0x16a>
	default:
		break;
 8001ae0:	bf00      	nop
	}
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000098 	.word	0x20000098
 8001aec:	40010800 	.word	0x40010800

08001af0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001af0:	f7ff ff3c 	bl	800196c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af4:	480b      	ldr	r0, [pc, #44]	@ (8001b24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001af6:	490c      	ldr	r1, [pc, #48]	@ (8001b28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001af8:	4a0c      	ldr	r2, [pc, #48]	@ (8001b2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001afc:	e002      	b.n	8001b04 <LoopCopyDataInit>

08001afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b02:	3304      	adds	r3, #4

08001b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b08:	d3f9      	bcc.n	8001afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0a:	4a09      	ldr	r2, [pc, #36]	@ (8001b30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b0c:	4c09      	ldr	r4, [pc, #36]	@ (8001b34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b10:	e001      	b.n	8001b16 <LoopFillZerobss>

08001b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b14:	3204      	adds	r2, #4

08001b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b18:	d3fb      	bcc.n	8001b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b1a:	f001 fb05 	bl	8003128 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b1e:	f7ff fc51 	bl	80013c4 <main>
  bx lr
 8001b22:	4770      	bx	lr
  ldr r0, =_sdata
 8001b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b28:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001b2c:	080031b4 	.word	0x080031b4
  ldr r2, =_sbss
 8001b30:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001b34:	2000042c 	.word	0x2000042c

08001b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b38:	e7fe      	b.n	8001b38 <ADC1_2_IRQHandler>
	...

08001b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b40:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <HAL_Init+0x28>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a07      	ldr	r2, [pc, #28]	@ (8001b64 <HAL_Init+0x28>)
 8001b46:	f043 0310 	orr.w	r3, r3, #16
 8001b4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	f000 f923 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b52:	200f      	movs	r0, #15
 8001b54:	f000 f808 	bl	8001b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b58:	f7ff fe7c 	bl	8001854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40022000 	.word	0x40022000

08001b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b70:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <HAL_InitTick+0x54>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <HAL_InitTick+0x58>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f93b 	bl	8001e02 <HAL_SYSTICK_Config>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00e      	b.n	8001bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b0f      	cmp	r3, #15
 8001b9a:	d80a      	bhi.n	8001bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	f000 f903 	bl	8001dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba8:	4a06      	ldr	r2, [pc, #24]	@ (8001bc4 <HAL_InitTick+0x5c>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e000      	b.n	8001bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000060 	.word	0x20000060
 8001bc0:	20000068 	.word	0x20000068
 8001bc4:	20000064 	.word	0x20000064

08001bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bcc:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <HAL_IncTick+0x1c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <HAL_IncTick+0x20>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4a03      	ldr	r2, [pc, #12]	@ (8001be8 <HAL_IncTick+0x20>)
 8001bda:	6013      	str	r3, [r2, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	20000068 	.word	0x20000068
 8001be8:	20000428 	.word	0x20000428

08001bec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b02      	ldr	r3, [pc, #8]	@ (8001bfc <HAL_GetTick+0x10>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	20000428 	.word	0x20000428

08001c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c10:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c32:	4a04      	ldr	r2, [pc, #16]	@ (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	60d3      	str	r3, [r2, #12]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c4c:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <__NVIC_GetPriorityGrouping+0x18>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	f003 0307 	and.w	r3, r3, #7
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	db0b      	blt.n	8001c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	f003 021f 	and.w	r2, r3, #31
 8001c7c:	4906      	ldr	r1, [pc, #24]	@ (8001c98 <__NVIC_EnableIRQ+0x34>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	2001      	movs	r0, #1
 8001c86:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	e000e100 	.word	0xe000e100

08001c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	db0a      	blt.n	8001cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	490c      	ldr	r1, [pc, #48]	@ (8001ce8 <__NVIC_SetPriority+0x4c>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	0112      	lsls	r2, r2, #4
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc4:	e00a      	b.n	8001cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4908      	ldr	r1, [pc, #32]	@ (8001cec <__NVIC_SetPriority+0x50>)
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	3b04      	subs	r3, #4
 8001cd4:	0112      	lsls	r2, r2, #4
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	440b      	add	r3, r1
 8001cda:	761a      	strb	r2, [r3, #24]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000e100 	.word	0xe000e100
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	@ 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f1c3 0307 	rsb	r3, r3, #7
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	bf28      	it	cs
 8001d0e:	2304      	movcs	r3, #4
 8001d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3304      	adds	r3, #4
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d902      	bls.n	8001d20 <NVIC_EncodePriority+0x30>
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3b03      	subs	r3, #3
 8001d1e:	e000      	b.n	8001d22 <NVIC_EncodePriority+0x32>
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	f04f 32ff 	mov.w	r2, #4294967295
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	401a      	ands	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d38:	f04f 31ff 	mov.w	r1, #4294967295
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	43d9      	mvns	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	4313      	orrs	r3, r2
         );
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3724      	adds	r7, #36	@ 0x24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d64:	d301      	bcc.n	8001d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00f      	b.n	8001d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d94 <SysTick_Config+0x40>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d72:	210f      	movs	r1, #15
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f7ff ff90 	bl	8001c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7c:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <SysTick_Config+0x40>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d82:	4b04      	ldr	r3, [pc, #16]	@ (8001d94 <SysTick_Config+0x40>)
 8001d84:	2207      	movs	r2, #7
 8001d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	e000e010 	.word	0xe000e010

08001d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ff2d 	bl	8001c00 <__NVIC_SetPriorityGrouping>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc0:	f7ff ff42 	bl	8001c48 <__NVIC_GetPriorityGrouping>
 8001dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	6978      	ldr	r0, [r7, #20]
 8001dcc:	f7ff ff90 	bl	8001cf0 <NVIC_EncodePriority>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff5f 	bl	8001c9c <__NVIC_SetPriority>
}
 8001dde:	bf00      	nop
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff35 	bl	8001c64 <__NVIC_EnableIRQ>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffa2 	bl	8001d54 <SysTick_Config>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b08b      	sub	sp, #44	@ 0x2c
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2e:	e161      	b.n	80020f4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e30:	2201      	movs	r2, #1
 8001e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	f040 8150 	bne.w	80020ee <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	4a97      	ldr	r2, [pc, #604]	@ (80020b0 <HAL_GPIO_Init+0x294>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d05e      	beq.n	8001f16 <HAL_GPIO_Init+0xfa>
 8001e58:	4a95      	ldr	r2, [pc, #596]	@ (80020b0 <HAL_GPIO_Init+0x294>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d875      	bhi.n	8001f4a <HAL_GPIO_Init+0x12e>
 8001e5e:	4a95      	ldr	r2, [pc, #596]	@ (80020b4 <HAL_GPIO_Init+0x298>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d058      	beq.n	8001f16 <HAL_GPIO_Init+0xfa>
 8001e64:	4a93      	ldr	r2, [pc, #588]	@ (80020b4 <HAL_GPIO_Init+0x298>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d86f      	bhi.n	8001f4a <HAL_GPIO_Init+0x12e>
 8001e6a:	4a93      	ldr	r2, [pc, #588]	@ (80020b8 <HAL_GPIO_Init+0x29c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d052      	beq.n	8001f16 <HAL_GPIO_Init+0xfa>
 8001e70:	4a91      	ldr	r2, [pc, #580]	@ (80020b8 <HAL_GPIO_Init+0x29c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d869      	bhi.n	8001f4a <HAL_GPIO_Init+0x12e>
 8001e76:	4a91      	ldr	r2, [pc, #580]	@ (80020bc <HAL_GPIO_Init+0x2a0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d04c      	beq.n	8001f16 <HAL_GPIO_Init+0xfa>
 8001e7c:	4a8f      	ldr	r2, [pc, #572]	@ (80020bc <HAL_GPIO_Init+0x2a0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d863      	bhi.n	8001f4a <HAL_GPIO_Init+0x12e>
 8001e82:	4a8f      	ldr	r2, [pc, #572]	@ (80020c0 <HAL_GPIO_Init+0x2a4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d046      	beq.n	8001f16 <HAL_GPIO_Init+0xfa>
 8001e88:	4a8d      	ldr	r2, [pc, #564]	@ (80020c0 <HAL_GPIO_Init+0x2a4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d85d      	bhi.n	8001f4a <HAL_GPIO_Init+0x12e>
 8001e8e:	2b12      	cmp	r3, #18
 8001e90:	d82a      	bhi.n	8001ee8 <HAL_GPIO_Init+0xcc>
 8001e92:	2b12      	cmp	r3, #18
 8001e94:	d859      	bhi.n	8001f4a <HAL_GPIO_Init+0x12e>
 8001e96:	a201      	add	r2, pc, #4	@ (adr r2, 8001e9c <HAL_GPIO_Init+0x80>)
 8001e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9c:	08001f17 	.word	0x08001f17
 8001ea0:	08001ef1 	.word	0x08001ef1
 8001ea4:	08001f03 	.word	0x08001f03
 8001ea8:	08001f45 	.word	0x08001f45
 8001eac:	08001f4b 	.word	0x08001f4b
 8001eb0:	08001f4b 	.word	0x08001f4b
 8001eb4:	08001f4b 	.word	0x08001f4b
 8001eb8:	08001f4b 	.word	0x08001f4b
 8001ebc:	08001f4b 	.word	0x08001f4b
 8001ec0:	08001f4b 	.word	0x08001f4b
 8001ec4:	08001f4b 	.word	0x08001f4b
 8001ec8:	08001f4b 	.word	0x08001f4b
 8001ecc:	08001f4b 	.word	0x08001f4b
 8001ed0:	08001f4b 	.word	0x08001f4b
 8001ed4:	08001f4b 	.word	0x08001f4b
 8001ed8:	08001f4b 	.word	0x08001f4b
 8001edc:	08001f4b 	.word	0x08001f4b
 8001ee0:	08001ef9 	.word	0x08001ef9
 8001ee4:	08001f0d 	.word	0x08001f0d
 8001ee8:	4a76      	ldr	r2, [pc, #472]	@ (80020c4 <HAL_GPIO_Init+0x2a8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eee:	e02c      	b.n	8001f4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	623b      	str	r3, [r7, #32]
          break;
 8001ef6:	e029      	b.n	8001f4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	3304      	adds	r3, #4
 8001efe:	623b      	str	r3, [r7, #32]
          break;
 8001f00:	e024      	b.n	8001f4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	3308      	adds	r3, #8
 8001f08:	623b      	str	r3, [r7, #32]
          break;
 8001f0a:	e01f      	b.n	8001f4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	330c      	adds	r3, #12
 8001f12:	623b      	str	r3, [r7, #32]
          break;
 8001f14:	e01a      	b.n	8001f4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d102      	bne.n	8001f24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f1e:	2304      	movs	r3, #4
 8001f20:	623b      	str	r3, [r7, #32]
          break;
 8001f22:	e013      	b.n	8001f4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d105      	bne.n	8001f38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f2c:	2308      	movs	r3, #8
 8001f2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	611a      	str	r2, [r3, #16]
          break;
 8001f36:	e009      	b.n	8001f4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f38:	2308      	movs	r3, #8
 8001f3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69fa      	ldr	r2, [r7, #28]
 8001f40:	615a      	str	r2, [r3, #20]
          break;
 8001f42:	e003      	b.n	8001f4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f44:	2300      	movs	r3, #0
 8001f46:	623b      	str	r3, [r7, #32]
          break;
 8001f48:	e000      	b.n	8001f4c <HAL_GPIO_Init+0x130>
          break;
 8001f4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	2bff      	cmp	r3, #255	@ 0xff
 8001f50:	d801      	bhi.n	8001f56 <HAL_GPIO_Init+0x13a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	e001      	b.n	8001f5a <HAL_GPIO_Init+0x13e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	2bff      	cmp	r3, #255	@ 0xff
 8001f60:	d802      	bhi.n	8001f68 <HAL_GPIO_Init+0x14c>
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	e002      	b.n	8001f6e <HAL_GPIO_Init+0x152>
 8001f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6a:	3b08      	subs	r3, #8
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	210f      	movs	r1, #15
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	401a      	ands	r2, r3
 8001f80:	6a39      	ldr	r1, [r7, #32]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 80a9 	beq.w	80020ee <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f9c:	4b4a      	ldr	r3, [pc, #296]	@ (80020c8 <HAL_GPIO_Init+0x2ac>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	4a49      	ldr	r2, [pc, #292]	@ (80020c8 <HAL_GPIO_Init+0x2ac>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6193      	str	r3, [r2, #24]
 8001fa8:	4b47      	ldr	r3, [pc, #284]	@ (80020c8 <HAL_GPIO_Init+0x2ac>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fb4:	4a45      	ldr	r2, [pc, #276]	@ (80020cc <HAL_GPIO_Init+0x2b0>)
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	3302      	adds	r3, #2
 8001fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	220f      	movs	r2, #15
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3d      	ldr	r2, [pc, #244]	@ (80020d0 <HAL_GPIO_Init+0x2b4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00d      	beq.n	8001ffc <HAL_GPIO_Init+0x1e0>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3c      	ldr	r2, [pc, #240]	@ (80020d4 <HAL_GPIO_Init+0x2b8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d007      	beq.n	8001ff8 <HAL_GPIO_Init+0x1dc>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3b      	ldr	r2, [pc, #236]	@ (80020d8 <HAL_GPIO_Init+0x2bc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d101      	bne.n	8001ff4 <HAL_GPIO_Init+0x1d8>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e004      	b.n	8001ffe <HAL_GPIO_Init+0x1e2>
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e002      	b.n	8001ffe <HAL_GPIO_Init+0x1e2>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <HAL_GPIO_Init+0x1e2>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002000:	f002 0203 	and.w	r2, r2, #3
 8002004:	0092      	lsls	r2, r2, #2
 8002006:	4093      	lsls	r3, r2
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800200e:	492f      	ldr	r1, [pc, #188]	@ (80020cc <HAL_GPIO_Init+0x2b0>)
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d006      	beq.n	8002036 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002028:	4b2c      	ldr	r3, [pc, #176]	@ (80020dc <HAL_GPIO_Init+0x2c0>)
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	492b      	ldr	r1, [pc, #172]	@ (80020dc <HAL_GPIO_Init+0x2c0>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	608b      	str	r3, [r1, #8]
 8002034:	e006      	b.n	8002044 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002036:	4b29      	ldr	r3, [pc, #164]	@ (80020dc <HAL_GPIO_Init+0x2c0>)
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	43db      	mvns	r3, r3
 800203e:	4927      	ldr	r1, [pc, #156]	@ (80020dc <HAL_GPIO_Init+0x2c0>)
 8002040:	4013      	ands	r3, r2
 8002042:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d006      	beq.n	800205e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002050:	4b22      	ldr	r3, [pc, #136]	@ (80020dc <HAL_GPIO_Init+0x2c0>)
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	4921      	ldr	r1, [pc, #132]	@ (80020dc <HAL_GPIO_Init+0x2c0>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	60cb      	str	r3, [r1, #12]
 800205c:	e006      	b.n	800206c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800205e:	4b1f      	ldr	r3, [pc, #124]	@ (80020dc <HAL_GPIO_Init+0x2c0>)
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	43db      	mvns	r3, r3
 8002066:	491d      	ldr	r1, [pc, #116]	@ (80020dc <HAL_GPIO_Init+0x2c0>)
 8002068:	4013      	ands	r3, r2
 800206a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d006      	beq.n	8002086 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002078:	4b18      	ldr	r3, [pc, #96]	@ (80020dc <HAL_GPIO_Init+0x2c0>)
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	4917      	ldr	r1, [pc, #92]	@ (80020dc <HAL_GPIO_Init+0x2c0>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
 8002084:	e006      	b.n	8002094 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002086:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <HAL_GPIO_Init+0x2c0>)
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	43db      	mvns	r3, r3
 800208e:	4913      	ldr	r1, [pc, #76]	@ (80020dc <HAL_GPIO_Init+0x2c0>)
 8002090:	4013      	ands	r3, r2
 8002092:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d01f      	beq.n	80020e0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020a0:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <HAL_GPIO_Init+0x2c0>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	490d      	ldr	r1, [pc, #52]	@ (80020dc <HAL_GPIO_Init+0x2c0>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]
 80020ac:	e01f      	b.n	80020ee <HAL_GPIO_Init+0x2d2>
 80020ae:	bf00      	nop
 80020b0:	10320000 	.word	0x10320000
 80020b4:	10310000 	.word	0x10310000
 80020b8:	10220000 	.word	0x10220000
 80020bc:	10210000 	.word	0x10210000
 80020c0:	10120000 	.word	0x10120000
 80020c4:	10110000 	.word	0x10110000
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40010000 	.word	0x40010000
 80020d0:	40010800 	.word	0x40010800
 80020d4:	40010c00 	.word	0x40010c00
 80020d8:	40011000 	.word	0x40011000
 80020dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <HAL_GPIO_Init+0x2f4>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	4909      	ldr	r1, [pc, #36]	@ (8002110 <HAL_GPIO_Init+0x2f4>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	3301      	adds	r3, #1
 80020f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fa:	fa22 f303 	lsr.w	r3, r2, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f47f ae96 	bne.w	8001e30 <HAL_GPIO_Init+0x14>
  }
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	372c      	adds	r7, #44	@ 0x2c
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr
 8002110:	40010400 	.word	0x40010400

08002114 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	887b      	ldrh	r3, [r7, #2]
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d002      	beq.n	8002132 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
 8002130:	e001      	b.n	8002136 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002136:	7bfb      	ldrb	r3, [r7, #15]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr

08002142 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	460b      	mov	r3, r1
 800214c:	807b      	strh	r3, [r7, #2]
 800214e:	4613      	mov	r3, r2
 8002150:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002152:	787b      	ldrb	r3, [r7, #1]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002158:	887a      	ldrh	r2, [r7, #2]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800215e:	e003      	b.n	8002168 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002160:	887b      	ldrh	r3, [r7, #2]
 8002162:	041a      	lsls	r2, r3, #16
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	611a      	str	r2, [r3, #16]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr

08002172 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002172:	b480      	push	{r7}
 8002174:	b085      	sub	sp, #20
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	460b      	mov	r3, r1
 800217c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002184:	887a      	ldrh	r2, [r7, #2]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4013      	ands	r3, r2
 800218a:	041a      	lsls	r2, r3, #16
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	43d9      	mvns	r1, r3
 8002190:	887b      	ldrh	r3, [r7, #2]
 8002192:	400b      	ands	r3, r1
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	611a      	str	r2, [r3, #16]
}
 800219a:	bf00      	nop
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e272      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 8087 	beq.w	80022d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c4:	4b92      	ldr	r3, [pc, #584]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d00c      	beq.n	80021ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021d0:	4b8f      	ldr	r3, [pc, #572]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d112      	bne.n	8002202 <HAL_RCC_OscConfig+0x5e>
 80021dc:	4b8c      	ldr	r3, [pc, #560]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e8:	d10b      	bne.n	8002202 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ea:	4b89      	ldr	r3, [pc, #548]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d06c      	beq.n	80022d0 <HAL_RCC_OscConfig+0x12c>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d168      	bne.n	80022d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e24c      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800220a:	d106      	bne.n	800221a <HAL_RCC_OscConfig+0x76>
 800220c:	4b80      	ldr	r3, [pc, #512]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a7f      	ldr	r2, [pc, #508]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	e02e      	b.n	8002278 <HAL_RCC_OscConfig+0xd4>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0x98>
 8002222:	4b7b      	ldr	r3, [pc, #492]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a7a      	ldr	r2, [pc, #488]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002228:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	4b78      	ldr	r3, [pc, #480]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a77      	ldr	r2, [pc, #476]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002234:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e01d      	b.n	8002278 <HAL_RCC_OscConfig+0xd4>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0xbc>
 8002246:	4b72      	ldr	r3, [pc, #456]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a71      	ldr	r2, [pc, #452]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800224c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	4b6f      	ldr	r3, [pc, #444]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a6e      	ldr	r2, [pc, #440]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	e00b      	b.n	8002278 <HAL_RCC_OscConfig+0xd4>
 8002260:	4b6b      	ldr	r3, [pc, #428]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a6a      	ldr	r2, [pc, #424]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002266:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	4b68      	ldr	r3, [pc, #416]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a67      	ldr	r2, [pc, #412]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002272:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002276:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d013      	beq.n	80022a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7ff fcb4 	bl	8001bec <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002288:	f7ff fcb0 	bl	8001bec <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	@ 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e200      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	4b5d      	ldr	r3, [pc, #372]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0xe4>
 80022a6:	e014      	b.n	80022d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7ff fca0 	bl	8001bec <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b0:	f7ff fc9c 	bl	8001bec <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	@ 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e1ec      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c2:	4b53      	ldr	r3, [pc, #332]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x10c>
 80022ce:	e000      	b.n	80022d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d063      	beq.n	80023a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022de:	4b4c      	ldr	r3, [pc, #304]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00b      	beq.n	8002302 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022ea:	4b49      	ldr	r3, [pc, #292]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d11c      	bne.n	8002330 <HAL_RCC_OscConfig+0x18c>
 80022f6:	4b46      	ldr	r3, [pc, #280]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d116      	bne.n	8002330 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002302:	4b43      	ldr	r3, [pc, #268]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <HAL_RCC_OscConfig+0x176>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d001      	beq.n	800231a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e1c0      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231a:	4b3d      	ldr	r3, [pc, #244]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4939      	ldr	r1, [pc, #228]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232e:	e03a      	b.n	80023a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d020      	beq.n	800237a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002338:	4b36      	ldr	r3, [pc, #216]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 800233a:	2201      	movs	r2, #1
 800233c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7ff fc55 	bl	8001bec <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002346:	f7ff fc51 	bl	8001bec <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e1a1      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002358:	4b2d      	ldr	r3, [pc, #180]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002364:	4b2a      	ldr	r3, [pc, #168]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4927      	ldr	r1, [pc, #156]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002374:	4313      	orrs	r3, r2
 8002376:	600b      	str	r3, [r1, #0]
 8002378:	e015      	b.n	80023a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800237a:	4b26      	ldr	r3, [pc, #152]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7ff fc34 	bl	8001bec <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002388:	f7ff fc30 	bl	8001bec <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e180      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239a:	4b1d      	ldr	r3, [pc, #116]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d03a      	beq.n	8002428 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d019      	beq.n	80023ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ba:	4b17      	ldr	r3, [pc, #92]	@ (8002418 <HAL_RCC_OscConfig+0x274>)
 80023bc:	2201      	movs	r2, #1
 80023be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c0:	f7ff fc14 	bl	8001bec <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c8:	f7ff fc10 	bl	8001bec <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e160      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023da:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023e6:	2001      	movs	r0, #1
 80023e8:	f000 fa9c 	bl	8002924 <RCC_Delay>
 80023ec:	e01c      	b.n	8002428 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002418 <HAL_RCC_OscConfig+0x274>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f4:	f7ff fbfa 	bl	8001bec <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fa:	e00f      	b.n	800241c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fc:	f7ff fbf6 	bl	8001bec <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d908      	bls.n	800241c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e146      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
 8002414:	42420000 	.word	0x42420000
 8002418:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241c:	4b92      	ldr	r3, [pc, #584]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1e9      	bne.n	80023fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80a6 	beq.w	8002582 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243a:	4b8b      	ldr	r3, [pc, #556]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10d      	bne.n	8002462 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002446:	4b88      	ldr	r3, [pc, #544]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	4a87      	ldr	r2, [pc, #540]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002450:	61d3      	str	r3, [r2, #28]
 8002452:	4b85      	ldr	r3, [pc, #532]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245e:	2301      	movs	r3, #1
 8002460:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002462:	4b82      	ldr	r3, [pc, #520]	@ (800266c <HAL_RCC_OscConfig+0x4c8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d118      	bne.n	80024a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800246e:	4b7f      	ldr	r3, [pc, #508]	@ (800266c <HAL_RCC_OscConfig+0x4c8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a7e      	ldr	r2, [pc, #504]	@ (800266c <HAL_RCC_OscConfig+0x4c8>)
 8002474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800247a:	f7ff fbb7 	bl	8001bec <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002482:	f7ff fbb3 	bl	8001bec <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b64      	cmp	r3, #100	@ 0x64
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e103      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	4b75      	ldr	r3, [pc, #468]	@ (800266c <HAL_RCC_OscConfig+0x4c8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d106      	bne.n	80024b6 <HAL_RCC_OscConfig+0x312>
 80024a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	4a6e      	ldr	r2, [pc, #440]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6213      	str	r3, [r2, #32]
 80024b4:	e02d      	b.n	8002512 <HAL_RCC_OscConfig+0x36e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x334>
 80024be:	4b6a      	ldr	r3, [pc, #424]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4a69      	ldr	r2, [pc, #420]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	6213      	str	r3, [r2, #32]
 80024ca:	4b67      	ldr	r3, [pc, #412]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	4a66      	ldr	r2, [pc, #408]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	f023 0304 	bic.w	r3, r3, #4
 80024d4:	6213      	str	r3, [r2, #32]
 80024d6:	e01c      	b.n	8002512 <HAL_RCC_OscConfig+0x36e>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	2b05      	cmp	r3, #5
 80024de:	d10c      	bne.n	80024fa <HAL_RCC_OscConfig+0x356>
 80024e0:	4b61      	ldr	r3, [pc, #388]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4a60      	ldr	r2, [pc, #384]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	f043 0304 	orr.w	r3, r3, #4
 80024ea:	6213      	str	r3, [r2, #32]
 80024ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	4a5d      	ldr	r2, [pc, #372]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6213      	str	r3, [r2, #32]
 80024f8:	e00b      	b.n	8002512 <HAL_RCC_OscConfig+0x36e>
 80024fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	4a5a      	ldr	r2, [pc, #360]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	f023 0301 	bic.w	r3, r3, #1
 8002504:	6213      	str	r3, [r2, #32]
 8002506:	4b58      	ldr	r3, [pc, #352]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	4a57      	ldr	r2, [pc, #348]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	f023 0304 	bic.w	r3, r3, #4
 8002510:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d015      	beq.n	8002546 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251a:	f7ff fb67 	bl	8001bec <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002522:	f7ff fb63 	bl	8001bec <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002530:	4293      	cmp	r3, r2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e0b1      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002538:	4b4b      	ldr	r3, [pc, #300]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0ee      	beq.n	8002522 <HAL_RCC_OscConfig+0x37e>
 8002544:	e014      	b.n	8002570 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002546:	f7ff fb51 	bl	8001bec <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f7ff fb4d 	bl	8001bec <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800255c:	4293      	cmp	r3, r2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e09b      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002564:	4b40      	ldr	r3, [pc, #256]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1ee      	bne.n	800254e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002570:	7dfb      	ldrb	r3, [r7, #23]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d105      	bne.n	8002582 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002576:	4b3c      	ldr	r3, [pc, #240]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	4a3b      	ldr	r2, [pc, #236]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002580:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8087 	beq.w	800269a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800258c:	4b36      	ldr	r3, [pc, #216]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b08      	cmp	r3, #8
 8002596:	d061      	beq.n	800265c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d146      	bne.n	800262e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a0:	4b33      	ldr	r3, [pc, #204]	@ (8002670 <HAL_RCC_OscConfig+0x4cc>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7ff fb21 	bl	8001bec <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ae:	f7ff fb1d 	bl	8001bec <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e06d      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c0:	4b29      	ldr	r3, [pc, #164]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025d4:	d108      	bne.n	80025e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025d6:	4b24      	ldr	r3, [pc, #144]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	4921      	ldr	r1, [pc, #132]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a19      	ldr	r1, [r3, #32]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f8:	430b      	orrs	r3, r1
 80025fa:	491b      	ldr	r1, [pc, #108]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002600:	4b1b      	ldr	r3, [pc, #108]	@ (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002602:	2201      	movs	r2, #1
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7ff faf1 	bl	8001bec <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260e:	f7ff faed 	bl	8001bec <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e03d      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002620:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x46a>
 800262c:	e035      	b.n	800269a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262e:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7ff fada 	bl	8001bec <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263c:	f7ff fad6 	bl	8001bec <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e026      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264e:	4b06      	ldr	r3, [pc, #24]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x498>
 800265a:	e01e      	b.n	800269a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d107      	bne.n	8002674 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e019      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
 8002668:	40021000 	.word	0x40021000
 800266c:	40007000 	.word	0x40007000
 8002670:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002674:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <HAL_RCC_OscConfig+0x500>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	429a      	cmp	r2, r3
 8002686:	d106      	bne.n	8002696 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d001      	beq.n	800269a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40021000 	.word	0x40021000

080026a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0d0      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026bc:	4b6a      	ldr	r3, [pc, #424]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d910      	bls.n	80026ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b67      	ldr	r3, [pc, #412]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 0207 	bic.w	r2, r3, #7
 80026d2:	4965      	ldr	r1, [pc, #404]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b63      	ldr	r3, [pc, #396]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0b8      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d020      	beq.n	800273a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002704:	4b59      	ldr	r3, [pc, #356]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a58      	ldr	r2, [pc, #352]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800270e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800271c:	4b53      	ldr	r3, [pc, #332]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4a52      	ldr	r2, [pc, #328]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002726:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002728:	4b50      	ldr	r3, [pc, #320]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	494d      	ldr	r1, [pc, #308]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d040      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b47      	ldr	r3, [pc, #284]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d115      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e07f      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002766:	4b41      	ldr	r3, [pc, #260]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e073      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002776:	4b3d      	ldr	r3, [pc, #244]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e06b      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002786:	4b39      	ldr	r3, [pc, #228]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f023 0203 	bic.w	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4936      	ldr	r1, [pc, #216]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002798:	f7ff fa28 	bl	8001bec <HAL_GetTick>
 800279c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a0:	f7ff fa24 	bl	8001bec <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e053      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	4b2d      	ldr	r3, [pc, #180]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 020c 	and.w	r2, r3, #12
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d1eb      	bne.n	80027a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027c8:	4b27      	ldr	r3, [pc, #156]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d210      	bcs.n	80027f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d6:	4b24      	ldr	r3, [pc, #144]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 0207 	bic.w	r2, r3, #7
 80027de:	4922      	ldr	r1, [pc, #136]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b20      	ldr	r3, [pc, #128]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e032      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002804:	4b19      	ldr	r3, [pc, #100]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4916      	ldr	r1, [pc, #88]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002822:	4b12      	ldr	r3, [pc, #72]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	490e      	ldr	r1, [pc, #56]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	4313      	orrs	r3, r2
 8002834:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002836:	f000 f821 	bl	800287c <HAL_RCC_GetSysClockFreq>
 800283a:	4602      	mov	r2, r0
 800283c:	4b0b      	ldr	r3, [pc, #44]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	490a      	ldr	r1, [pc, #40]	@ (8002870 <HAL_RCC_ClockConfig+0x1c8>)
 8002848:	5ccb      	ldrb	r3, [r1, r3]
 800284a:	fa22 f303 	lsr.w	r3, r2, r3
 800284e:	4a09      	ldr	r2, [pc, #36]	@ (8002874 <HAL_RCC_ClockConfig+0x1cc>)
 8002850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002852:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <HAL_RCC_ClockConfig+0x1d0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff f986 	bl	8001b68 <HAL_InitTick>

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40022000 	.word	0x40022000
 800286c:	40021000 	.word	0x40021000
 8002870:	08003188 	.word	0x08003188
 8002874:	20000060 	.word	0x20000060
 8002878:	20000064 	.word	0x20000064

0800287c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002896:	4b1e      	ldr	r3, [pc, #120]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x94>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d002      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x30>
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d003      	beq.n	80028b2 <HAL_RCC_GetSysClockFreq+0x36>
 80028aa:	e027      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028ac:	4b19      	ldr	r3, [pc, #100]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ae:	613b      	str	r3, [r7, #16]
      break;
 80028b0:	e027      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	0c9b      	lsrs	r3, r3, #18
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	4a17      	ldr	r2, [pc, #92]	@ (8002918 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028bc:	5cd3      	ldrb	r3, [r2, r3]
 80028be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d010      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028ca:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x94>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	0c5b      	lsrs	r3, r3, #17
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	4a11      	ldr	r2, [pc, #68]	@ (800291c <HAL_RCC_GetSysClockFreq+0xa0>)
 80028d6:	5cd3      	ldrb	r3, [r2, r3]
 80028d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x98>)
 80028de:	fb03 f202 	mul.w	r2, r3, r2
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	e004      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002920 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028f0:	fb02 f303 	mul.w	r3, r2, r3
 80028f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	613b      	str	r3, [r7, #16]
      break;
 80028fa:	e002      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028fc:	4b05      	ldr	r3, [pc, #20]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x98>)
 80028fe:	613b      	str	r3, [r7, #16]
      break;
 8002900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002902:	693b      	ldr	r3, [r7, #16]
}
 8002904:	4618      	mov	r0, r3
 8002906:	371c      	adds	r7, #28
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000
 8002914:	007a1200 	.word	0x007a1200
 8002918:	08003198 	.word	0x08003198
 800291c:	080031a8 	.word	0x080031a8
 8002920:	003d0900 	.word	0x003d0900

08002924 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800292c:	4b0a      	ldr	r3, [pc, #40]	@ (8002958 <RCC_Delay+0x34>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0a      	ldr	r2, [pc, #40]	@ (800295c <RCC_Delay+0x38>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0a5b      	lsrs	r3, r3, #9
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	fb02 f303 	mul.w	r3, r2, r3
 800293e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002940:	bf00      	nop
  }
  while (Delay --);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1e5a      	subs	r2, r3, #1
 8002946:	60fa      	str	r2, [r7, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1f9      	bne.n	8002940 <RCC_Delay+0x1c>
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	20000060 	.word	0x20000060
 800295c:	10624dd3 	.word	0x10624dd3

08002960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e041      	b.n	80029f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fe ff96 	bl	80018b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3304      	adds	r3, #4
 800299c:	4619      	mov	r1, r3
 800299e:	4610      	mov	r0, r2
 80029a0:	f000 fa56 	bl	8002e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d001      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e035      	b.n	8002a84 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a16      	ldr	r2, [pc, #88]	@ (8002a90 <HAL_TIM_Base_Start_IT+0x90>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d009      	beq.n	8002a4e <HAL_TIM_Base_Start_IT+0x4e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a42:	d004      	beq.n	8002a4e <HAL_TIM_Base_Start_IT+0x4e>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a12      	ldr	r2, [pc, #72]	@ (8002a94 <HAL_TIM_Base_Start_IT+0x94>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d111      	bne.n	8002a72 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b06      	cmp	r3, #6
 8002a5e:	d010      	beq.n	8002a82 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a70:	e007      	b.n	8002a82 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0201 	orr.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40012c00 	.word	0x40012c00
 8002a94:	40000400 	.word	0x40000400

08002a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d020      	beq.n	8002afc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d01b      	beq.n	8002afc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f06f 0202 	mvn.w	r2, #2
 8002acc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f998 	bl	8002e18 <HAL_TIM_IC_CaptureCallback>
 8002ae8:	e005      	b.n	8002af6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f98b 	bl	8002e06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f99a 	bl	8002e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d020      	beq.n	8002b48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d01b      	beq.n	8002b48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0204 	mvn.w	r2, #4
 8002b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f972 	bl	8002e18 <HAL_TIM_IC_CaptureCallback>
 8002b34:	e005      	b.n	8002b42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f965 	bl	8002e06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f974 	bl	8002e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d020      	beq.n	8002b94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d01b      	beq.n	8002b94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0208 	mvn.w	r2, #8
 8002b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2204      	movs	r2, #4
 8002b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f94c 	bl	8002e18 <HAL_TIM_IC_CaptureCallback>
 8002b80:	e005      	b.n	8002b8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f93f 	bl	8002e06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f94e 	bl	8002e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d020      	beq.n	8002be0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d01b      	beq.n	8002be0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0210 	mvn.w	r2, #16
 8002bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2208      	movs	r2, #8
 8002bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f926 	bl	8002e18 <HAL_TIM_IC_CaptureCallback>
 8002bcc:	e005      	b.n	8002bda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f919 	bl	8002e06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f928 	bl	8002e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00c      	beq.n	8002c04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d007      	beq.n	8002c04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0201 	mvn.w	r2, #1
 8002bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe fca6 	bl	8001550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00c      	beq.n	8002c28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fa6f 	bl	8003106 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00c      	beq.n	8002c4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d007      	beq.n	8002c4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f8f8 	bl	8002e3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00c      	beq.n	8002c70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0220 	mvn.w	r2, #32
 8002c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fa42 	bl	80030f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c70:	bf00      	nop
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <HAL_TIM_ConfigClockSource+0x1c>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e0b4      	b.n	8002dfe <HAL_TIM_ConfigClockSource+0x186>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ccc:	d03e      	beq.n	8002d4c <HAL_TIM_ConfigClockSource+0xd4>
 8002cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cd2:	f200 8087 	bhi.w	8002de4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cda:	f000 8086 	beq.w	8002dea <HAL_TIM_ConfigClockSource+0x172>
 8002cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ce2:	d87f      	bhi.n	8002de4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce4:	2b70      	cmp	r3, #112	@ 0x70
 8002ce6:	d01a      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0xa6>
 8002ce8:	2b70      	cmp	r3, #112	@ 0x70
 8002cea:	d87b      	bhi.n	8002de4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cec:	2b60      	cmp	r3, #96	@ 0x60
 8002cee:	d050      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x11a>
 8002cf0:	2b60      	cmp	r3, #96	@ 0x60
 8002cf2:	d877      	bhi.n	8002de4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf4:	2b50      	cmp	r3, #80	@ 0x50
 8002cf6:	d03c      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0xfa>
 8002cf8:	2b50      	cmp	r3, #80	@ 0x50
 8002cfa:	d873      	bhi.n	8002de4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cfc:	2b40      	cmp	r3, #64	@ 0x40
 8002cfe:	d058      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0x13a>
 8002d00:	2b40      	cmp	r3, #64	@ 0x40
 8002d02:	d86f      	bhi.n	8002de4 <HAL_TIM_ConfigClockSource+0x16c>
 8002d04:	2b30      	cmp	r3, #48	@ 0x30
 8002d06:	d064      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d08:	2b30      	cmp	r3, #48	@ 0x30
 8002d0a:	d86b      	bhi.n	8002de4 <HAL_TIM_ConfigClockSource+0x16c>
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	d060      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	d867      	bhi.n	8002de4 <HAL_TIM_ConfigClockSource+0x16c>
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d05c      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d18:	2b10      	cmp	r3, #16
 8002d1a:	d05a      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d1c:	e062      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d2e:	f000 f96a 	bl	8003006 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	609a      	str	r2, [r3, #8]
      break;
 8002d4a:	e04f      	b.n	8002dec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d5c:	f000 f953 	bl	8003006 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d6e:	609a      	str	r2, [r3, #8]
      break;
 8002d70:	e03c      	b.n	8002dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f000 f8ca 	bl	8002f18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2150      	movs	r1, #80	@ 0x50
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 f921 	bl	8002fd2 <TIM_ITRx_SetConfig>
      break;
 8002d90:	e02c      	b.n	8002dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f000 f8e8 	bl	8002f74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2160      	movs	r1, #96	@ 0x60
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 f911 	bl	8002fd2 <TIM_ITRx_SetConfig>
      break;
 8002db0:	e01c      	b.n	8002dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f000 f8aa 	bl	8002f18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2140      	movs	r1, #64	@ 0x40
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 f901 	bl	8002fd2 <TIM_ITRx_SetConfig>
      break;
 8002dd0:	e00c      	b.n	8002dec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4610      	mov	r0, r2
 8002dde:	f000 f8f8 	bl	8002fd2 <TIM_ITRx_SetConfig>
      break;
 8002de2:	e003      	b.n	8002dec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	73fb      	strb	r3, [r7, #15]
      break;
 8002de8:	e000      	b.n	8002dec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002dea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr

08002e2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
	...

08002e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a2b      	ldr	r2, [pc, #172]	@ (8002f10 <TIM_Base_SetConfig+0xc0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d007      	beq.n	8002e78 <TIM_Base_SetConfig+0x28>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e6e:	d003      	beq.n	8002e78 <TIM_Base_SetConfig+0x28>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a28      	ldr	r2, [pc, #160]	@ (8002f14 <TIM_Base_SetConfig+0xc4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d108      	bne.n	8002e8a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a20      	ldr	r2, [pc, #128]	@ (8002f10 <TIM_Base_SetConfig+0xc0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d007      	beq.n	8002ea2 <TIM_Base_SetConfig+0x52>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e98:	d003      	beq.n	8002ea2 <TIM_Base_SetConfig+0x52>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002f14 <TIM_Base_SetConfig+0xc4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d108      	bne.n	8002eb4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a0d      	ldr	r2, [pc, #52]	@ (8002f10 <TIM_Base_SetConfig+0xc0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d103      	bne.n	8002ee8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d005      	beq.n	8002f06 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f023 0201 	bic.w	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	611a      	str	r2, [r3, #16]
  }
}
 8002f06:	bf00      	nop
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	40012c00 	.word	0x40012c00
 8002f14:	40000400 	.word	0x40000400

08002f18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	f023 0201 	bic.w	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f023 030a 	bic.w	r3, r3, #10
 8002f54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	621a      	str	r2, [r3, #32]
}
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f023 0210 	bic.w	r2, r3, #16
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	031b      	lsls	r3, r3, #12
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	621a      	str	r2, [r3, #32]
}
 8002fc8:	bf00      	nop
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b085      	sub	sp, #20
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f043 0307 	orr.w	r3, r3, #7
 8002ff4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	609a      	str	r2, [r3, #8]
}
 8002ffc:	bf00      	nop
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr

08003006 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003006:	b480      	push	{r7}
 8003008:	b087      	sub	sp, #28
 800300a:	af00      	add	r7, sp, #0
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
 8003012:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003020:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	021a      	lsls	r2, r3, #8
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	431a      	orrs	r2, r3
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	4313      	orrs	r3, r2
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	609a      	str	r2, [r3, #8]
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003058:	2302      	movs	r3, #2
 800305a:	e041      	b.n	80030e0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003082:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a14      	ldr	r2, [pc, #80]	@ (80030ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d009      	beq.n	80030b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030a8:	d004      	beq.n	80030b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a10      	ldr	r2, [pc, #64]	@ (80030f0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d10c      	bne.n	80030ce <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40012c00 	.word	0x40012c00
 80030f0:	40000400 	.word	0x40000400

080030f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr

08003106 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <memset>:
 8003118:	4603      	mov	r3, r0
 800311a:	4402      	add	r2, r0
 800311c:	4293      	cmp	r3, r2
 800311e:	d100      	bne.n	8003122 <memset+0xa>
 8003120:	4770      	bx	lr
 8003122:	f803 1b01 	strb.w	r1, [r3], #1
 8003126:	e7f9      	b.n	800311c <memset+0x4>

08003128 <__libc_init_array>:
 8003128:	b570      	push	{r4, r5, r6, lr}
 800312a:	2600      	movs	r6, #0
 800312c:	4d0c      	ldr	r5, [pc, #48]	@ (8003160 <__libc_init_array+0x38>)
 800312e:	4c0d      	ldr	r4, [pc, #52]	@ (8003164 <__libc_init_array+0x3c>)
 8003130:	1b64      	subs	r4, r4, r5
 8003132:	10a4      	asrs	r4, r4, #2
 8003134:	42a6      	cmp	r6, r4
 8003136:	d109      	bne.n	800314c <__libc_init_array+0x24>
 8003138:	f000 f81a 	bl	8003170 <_init>
 800313c:	2600      	movs	r6, #0
 800313e:	4d0a      	ldr	r5, [pc, #40]	@ (8003168 <__libc_init_array+0x40>)
 8003140:	4c0a      	ldr	r4, [pc, #40]	@ (800316c <__libc_init_array+0x44>)
 8003142:	1b64      	subs	r4, r4, r5
 8003144:	10a4      	asrs	r4, r4, #2
 8003146:	42a6      	cmp	r6, r4
 8003148:	d105      	bne.n	8003156 <__libc_init_array+0x2e>
 800314a:	bd70      	pop	{r4, r5, r6, pc}
 800314c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003150:	4798      	blx	r3
 8003152:	3601      	adds	r6, #1
 8003154:	e7ee      	b.n	8003134 <__libc_init_array+0xc>
 8003156:	f855 3b04 	ldr.w	r3, [r5], #4
 800315a:	4798      	blx	r3
 800315c:	3601      	adds	r6, #1
 800315e:	e7f2      	b.n	8003146 <__libc_init_array+0x1e>
 8003160:	080031ac 	.word	0x080031ac
 8003164:	080031ac 	.word	0x080031ac
 8003168:	080031ac 	.word	0x080031ac
 800316c:	080031b0 	.word	0x080031b0

08003170 <_init>:
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003172:	bf00      	nop
 8003174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003176:	bc08      	pop	{r3}
 8003178:	469e      	mov	lr, r3
 800317a:	4770      	bx	lr

0800317c <_fini>:
 800317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317e:	bf00      	nop
 8003180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003182:	bc08      	pop	{r3}
 8003184:	469e      	mov	lr, r3
 8003186:	4770      	bx	lr
